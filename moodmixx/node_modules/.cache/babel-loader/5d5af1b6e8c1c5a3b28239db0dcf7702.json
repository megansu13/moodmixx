{"ast":null,"code":"var _jsxFileName = \"/Users/gunhaar/Desktop/441proj/moodmixx/src/examples/Advanced.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useMemo, useRef } from 'react'\n// import TinderCard from 'react-tinder-card'\n\n// const db = [\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b27333b8541201f1ef38941024be\",\n//     album_name: \"evermore\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/a53fb417cdb223b78bca6144fdb8ba24ec21ebb2?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     artist_names: \"Taylor Swift\",\n//     song_name: 'gold rush',\n//   },\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b273f8553e18a11209d4becd0336\",\n//     album_name: \"Melodrama\",\n//     artist_names: \"Lorde\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/fa4496aca7ababab49280bebde9be00b1078182c?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     song_name: \"Hard Feelings\"\n\n//   },\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b2736d63fd3e1afa17b0d5563131\",\n//     album_name: \"This Is What It Feels Like\",\n//     artist_names: \"Gracie Abrams\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/9971c582b0fb3702a61963723e5c7dce69138449?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     song_name: \"Feels Like\"\n//   }\n// ]\n\n// function Advanced () {\n//   const [currentIndex, setCurrentIndex] = useState(db.length - 1)\n//   const [lastDirection, setLastDirection] = useState()\n//   const [song, setSong] = useState()\n//   // used for outOfFrame closure\n//   const currentIndexRef = useRef(currentIndex)\n\n//   const childRefs = useMemo(\n//     () =>\n//       Array(db.length)\n//         .fill(0)\n//         .map((i) => React.createRef()),\n//     []\n//   )\n\n//   const updateCurrentIndex = (val) => {\n//     setCurrentIndex(val)\n//     currentIndexRef.current = val\n//   }\n\n//   const canGoBack = currentIndex < db.length - 1\n\n//   const canSwipe = currentIndex >= 0\n\n//   // set last direction and decrease current index\n//   function stop() {\n//     console.log(\"song from react:\", song)\n//     song.pause();\n//     console.log(\"did this stop\")\n//   }\n\n//   const swiped = (direction, nameToDelete, index, song_preview) => {\n//     setLastDirection(direction)\n//     updateCurrentIndex(index - 1)\n//     stop();\n//   }\n\n//   const outOfFrame = (name, idx) => {\n//     console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n//     // handle the case in which go back is pressed before card goes outOfFrame\n//     currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n//     // TODO: when quickly swipe and restore multiple times the same card,\n//     // it happens multiple outOfFrame events are queued and the card disappear\n//     // during latest swipes. Only the last outOfFrame event should be considered valid\n//   }\n\n//   const swipe = async (dir) => {\n//     if (canSwipe && currentIndex < db.length) {\n//       await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\n//     }\n//   }\n\n//   // increase current index and show card\n//   const goBack = async () => {\n//     if (!canGoBack) return\n//     const newIndex = currentIndex + 1\n//     updateCurrentIndex(newIndex)\n//     await childRefs[newIndex].current.restoreCard()\n//   }\n\n//   function StartButton({ song_preview }) {\n//     function start() {\n//       const audio = new Audio(song_preview);\n//       console.log(\"song name:\", song_preview)\n//       audio.play()\n//       setSong(audio)\n//       console.log(\"is this playing lmao\")\n//     }\n\n//     return (\n//       <button onClick={start}>\n//         play!\n//       </button>\n//     );\n//   }\n\n//   function StopButton() {\n//     function stop() {\n//       console.log(\"song from react:\", song)\n//       song.pause();\n//       console.log(\"did this stop\")\n//     }\n\n//     return (\n//       <button onClick={stop}>\n//         pause!\n//       </button>\n//     );\n//   }\n\n//   return (\n//     <div>\n//       <link \n//         href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500&family=MuseoModerno:ital,wght@0,100..900;1,100..900&display=swap\" \n//         rel=\"stylesheet\"\n//       />\n//       <link\n//         href='https://fonts.googleapis.com/css?family=Alatsi&display=swap'\n//         rel='stylesheet'\n//       />\n//       <h1>moodmixx</h1>\n//       <div className='cardContainer'>\n//         {db.map((song, index) => (\n//           <div>\n//           <TinderCard\n//             ref={childRefs[index]}\n//             className='swipe'\n//             key={song.song_name}\n//             onSwipe={(dir) => swiped(dir, song.song_name, index, song.preview_url)}\n//             onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n//           >\n//             <div\n//               style={{ backgroundImage: 'url(' + song.album_cover + ')' }}\n//               className='card'\n//             >\n\n//               <h2>{song.song_name}</h2>\n//               <p>\n//                 {song.album_name} <br></br>\n//                 {song.artist_names}\n//               </p>\n//             </div>\n//             <StartButton song_preview={song.preview_url} />\n//             {/* <StopButton /> */}\n//           </TinderCard>\n//           </div>\n//         ))}\n//       </div>\n//       <div className='buttons'>\n//         <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('left')}>Swipe left!</button>\n//         <button style={{ backgroundColor: !canGoBack && '#c3c4d3' }} onClick={() => goBack()}>Undo swipe!</button>\n//         <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('right')}>Swipe right!</button>\n//       </div>\n//       {lastDirection ? (\n//         <h2 key={lastDirection} className='infoText'>\n//           You swiped {lastDirection}\n//         </h2>\n//       ) : (\n//         <h2 className='infoText'>\n//           Swipe a card to get started!\n//         </h2>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default Advanced\n\nimport React, { useState, useMemo, useEffect, useRef } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Advanced() {\n  _s();\n  const [songs, setSongs] = useState([]); // State to hold song data\n  const [currentIndex, setCurrentIndex] = useState(0); // Updated to start from 0\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastDirection, setLastDirection] = useState();\n  const currentIndexRef = useRef(currentIndex);\n  const childRefs = useMemo(() => Array(songs.length).fill(0).map(() => /*#__PURE__*/React.createRef()), [songs.length]);\n\n  // useEffect(() => {\n  //   // Fetch song data from Flask API\n  //   fetch('/saveDaylist/') // Adjust the endpoint as needed\n  //     .then(response => { response.json() })\n  //     .then(data => {\n  //       console.log(data)\n  //       setSongs(data.song_info); // Update state with song data\n  //       setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n  //     });\n  // }, []);\n\n  useEffect(() => {\n    // Declare a boolean flag that we can use to cancel the API request.\n    let ignoreStaleRequest = false;\n\n    // Call REST API to get the post's information\n    fetch(`http://localhost:8080/`, {\n      mode: 'no-cors'\n    }).then(response => {\n      if (!response.ok) throw Error(response.statusText);\n      console.log(response);\n      return response.json();\n    }).then(data => {\n      // If ignoreStaleRequest was set to true, we want to ignore the results of the\n      // the request. Otherwise, update the state to trigger a new render.\n      if (!ignoreStaleRequest) {\n        console.log(\"LOOK HERE\", data);\n        setIsLoading(false);\n        setSongs(data.song_info); // Update state with song data\n        setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n      }\n    }).catch(error => {\n      console.log(error);\n      setIsLoading(false);\n    });\n    return () => {\n      // This is a cleanup function that runs whenever the Post component\n      // unmounts or re-renders. If a Post is about to unmount or re-render, we\n      // should avoid updating state.\n      ignoreStaleRequest = true;\n    };\n  }, []);\n  const updateCurrentIndex = val => {\n    setCurrentIndex(val);\n    currentIndexRef.current = val;\n  };\n  const canGoBack = currentIndex < songs.length - 1;\n  const canSwipe = currentIndex >= 0;\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction);\n    updateCurrentIndex(index - 1);\n  };\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n  };\n  const swipe = async dir => {\n    if (canSwipe && currentIndex < songs.length) {\n      await childRefs[currentIndex].current.swipe(dir);\n    }\n  };\n  const goBack = async () => {\n    if (!canGoBack) return;\n    const newIndex = currentIndex + 1;\n    updateCurrentIndex(newIndex);\n    await childRefs[newIndex].current.restoreCard();\n  };\n  return !isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Spotify Tinder Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardContainer\",\n      children: songs.map((song, index) => /*#__PURE__*/_jsxDEV(TinderCard, {\n        ref: childRefs[index],\n        className: \"swipe\",\n        onSwipe: dir => swiped(dir, song.song_name, index),\n        onCardLeftScreen: () => outOfFrame(song.song_name, index),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundImage: `url(${song.album_cover})`\n          },\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: song.song_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this)\n      }, song.song_name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \" Loading... \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n}\n_s(Advanced, \"EcH8DHB7yzKlAKZJsEeIeWv9DVs=\");\n_c = Advanced;\nexport default Advanced;\n\n// import React, { useState, useMemo, useRef, useEffect } from 'react';\n// import TinderCard from 'react-tinder-card'\n\n// const db = [\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b27333b8541201f1ef38941024be\",\n//     album_name: \"evermore\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/a53fb417cdb223b78bca6144fdb8ba24ec21ebb2?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     artist_names: \"Taylor Swift\",\n//     song_name: 'gold rush',\n//   },\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b273f8553e18a11209d4becd0336\",\n//     album_name: \"Melodrama\",\n//     artist_names: \"Lorde\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/fa4496aca7ababab49280bebde9be00b1078182c?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     song_name: \"Hard Feelings\"\n\n//   },\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b2736d63fd3e1afa17b0d5563131\",\n//     album_name: \"This Is What It Feels Like\",\n//     artist_names: \"Gracie Abrams\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/9971c582b0fb3702a61963723e5c7dce69138449?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     song_name: \"Feels Like\"\n//   }\n// ]\n\n// function Advanced () {\n//   const [songs, setSongs] = useState([]);\n//   const [currentIndex, setCurrentIndex] = useState(0)\n//   const [lastDirection, setLastDirection] = useState()\n//   const [song, setSong] = useState()\n//   // used for outOfFrame closure\n//   const currentIndexRef = useRef(currentIndex)\n\n//   useEffect(() => {\n//     setCurrentIndex(songs.length - 1);\n//   }, [songs]);\n\n//   // Fetch songs from Flask on component mount\n//   useEffect(() => {\n//     fetch('http://127.0.0.1:8080/getDaylist')\n//       .then(response => response.json())\n//       .then(data => console.log(data))\n//       .catch(error => console.error('Error fetching songs:', error));\n//   }, []);\n//   const childRefs = useMemo(\n//     () =>\n//       Array(db.length)\n//         .fill(0)\n//         .map((i) => React.createRef()),\n//     []\n//   )\n\n//   const updateCurrentIndex = (val) => {\n//     setCurrentIndex(val)\n//     currentIndexRef.current = val\n//   }\n\n//   const canGoBack = currentIndex < db.length - 1\n\n//   const canSwipe = currentIndex >= 0\n\n//   // set last direction and decrease current index\n//   function stop() {\n//     console.log(\"song from react:\", song)\n//     song.pause();\n//     console.log(\"did this stop\")\n//   }\n\n//   const swiped = (direction, nameToDelete, index, song_preview) => {\n//     setLastDirection(direction)\n//     updateCurrentIndex(index - 1)\n//     stop();\n//   }\n\n//   const outOfFrame = (name, idx) => {\n//     console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n//     // handle the case in which go back is pressed before card goes outOfFrame\n//     currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n//     // TODO: when quickly swipe and restore multiple times the same card,\n//     // it happens multiple outOfFrame events are queued and the card disappear\n//     // during latest swipes. Only the last outOfFrame event should be considered valid\n//   }\n\n//   const swipe = async (dir) => {\n//     if (canSwipe && currentIndex < db.length) {\n//       await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\n//     }\n//   }\n\n//   // increase current index and show card\n//   const goBack = async () => {\n//     if (!canGoBack) return\n//     const newIndex = currentIndex + 1\n//     updateCurrentIndex(newIndex)\n//     await childRefs[newIndex].current.restoreCard()\n//   }\n\n//   function StartButton({ song_preview }) {\n//     function start() {\n//       const audio = new Audio(song_preview);\n//       console.log(\"song name:\", song_preview)\n//       audio.play()\n//       setSong(audio)\n//       console.log(\"is this playing lmao\")\n//     }\n\n//     return (\n//       <button onClick={start}>\n//         play!\n//       </button>\n//     );\n//   }\n\n//   function StopButton() {\n//     function stop() {\n//       console.log(\"song from react:\", song)\n//       song.pause();\n//       console.log(\"did this stop\")\n//     }\n\n//     return (\n//       <button onClick={stop}>\n//         pause!\n//       </button>\n//     );\n//   }\n\n//   return (\n//     <div>\n//       <link \n//         href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500&family=MuseoModerno:ital,wght@0,100..900;1,100..900&display=swap\" \n//         rel=\"stylesheet\"\n//       />\n//       <link\n//         href='https://fonts.googleapis.com/css?family=Alatsi&display=swap'\n//         rel='stylesheet'\n//       />\n//       <h1>moodmixx</h1>\n//       <div className='cardContainer'>\n//         {db.map((song, index) => (\n//           <div>\n//           <TinderCard\n//             ref={childRefs[index]}\n//             className='swipe'\n//             key={song.song_name}\n//             onSwipe={(dir) => swiped(dir, song.song_name, index, song.preview_url)}\n//             onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n//           >\n//             <div\n//               style={{ backgroundImage: 'url(' + song.album_cover + ')' }}\n//               className='card'\n//             >\n\n//               <h2>{song.song_name}</h2>\n//               <p>\n//                 {song.album_name} <br></br>\n//                 {song.artist_names}\n//               </p>\n//             </div>\n//             <StartButton song_preview={song.preview_url} />\n//             {/* <StopButton /> */}\n//           </TinderCard>\n//           </div>\n//         ))}\n//       </div>\n//       <div className='buttons'>\n//         <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('left')}>Swipe left!</button>\n//         <button style={{ backgroundColor: !canGoBack && '#c3c4d3' }} onClick={() => goBack()}>Undo swipe!</button>\n//         <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('right')}>Swipe right!</button>\n//       </div>\n//       {lastDirection ? (\n//         <h2 key={lastDirection} className='infoText'>\n//           You swiped {lastDirection}\n//         </h2>\n//       ) : (\n//         <h2 className='infoText'>\n//           Swipe a card to get started!\n//         </h2>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default Advanced\n\n// import React, { useState, useMemo, useEffect, useRef } from 'react';\n// import TinderCard from 'react-tinder-card';\n\n// function Advanced() {\n//   const [songs, setSongs] = useState([]); // State to hold song data\n//   const [currentIndex, setCurrentIndex] = useState(0); // Updated to start from 0\n//   const [isLoading, setIsLoading] = useState(true);\n//   const [lastDirection, setLastDirection] = useState();\n\n//   const currentIndexRef = useRef(currentIndex);\n//   const childRefs = useMemo(() => Array(songs.length).fill(0).map(() => React.createRef()), [songs.length]);\n\n//   // useEffect(() => {\n//   //   // Fetch song data from Flask API\n//   //   fetch('/saveDaylist/') // Adjust the endpoint as needed\n//   //     .then(response => { response.json() })\n//   //     .then(data => {\n//   //       console.log(data)\n//   //       setSongs(data.song_info); // Update state with song data\n//   //       setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n//   //     });\n//   // }, []);\n\n//   useEffect(() => {\n//     // Declare a boolean flag that we can use to cancel the API request.\n//     let ignoreStaleRequest = false;\n\n//     // Call REST API to get the post's information\n//     fetch(`http://localhost:5000/`, { mode: 'no-cors', })\n//       .then((response) => {\n//         if (!response.ok) throw Error(response.statusText);\n//         console.log(response)\n//         return response.json();\n//       })\n//       .then((data) => {\n//         // If ignoreStaleRequest was set to true, we want to ignore the results of the\n//         // the request. Otherwise, update the state to trigger a new render.\n//         if (!ignoreStaleRequest) {\n//           console.log(\"LOOK HERE\", data);\n//           setIsLoading(false);\n//           setSongs(data.song_info); // Update state with song data\n//           setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         setIsLoading(false);\n//       });\n\n//     return () => {\n//       // This is a cleanup function that runs whenever the Post component\n//       // unmounts or re-renders. If a Post is about to unmount or re-render, we\n//       // should avoid updating state.\n//       ignoreStaleRequest = true;\n//     };\n//   }, []);\n\n//   const updateCurrentIndex = (val) => {\n//     setCurrentIndex(val);\n//     currentIndexRef.current = val;\n//   };\n\n//   const canGoBack = currentIndex < songs.length - 1;\n//   const canSwipe = currentIndex >= 0;\n\n//   const swiped = (direction, nameToDelete, index) => {\n//     setLastDirection(direction);\n//     updateCurrentIndex(index - 1);\n//   };\n\n//   const outOfFrame = (name, idx) => {\n//     console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n//     currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n//   };\n\n//   const swipe = async (dir) => {\n//     if (canSwipe && currentIndex < songs.length) {\n//       await childRefs[currentIndex].current.swipe(dir);\n//     }\n//   };\n\n//   const goBack = async () => {\n//     if (!canGoBack) return;\n//     const newIndex = currentIndex + 1;\n//     updateCurrentIndex(newIndex);\n//     await childRefs[newIndex].current.restoreCard();\n//   };\n\n//   return !isLoading ? (\n//     <div>\n//       {/* Existing layout and CSS links */}\n//       <h1>Spotify Tinder Cards</h1>\n//       <div className='cardContainer'>\n//         {songs.map((song, index) => (\n//           <TinderCard\n//             ref={childRefs[index]}\n//             className='swipe'\n//             key={song.song_name}\n//             onSwipe={(dir) => swiped(dir, song.song_name, index)}\n//             onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n//           >\n//             <div\n//               style={{ backgroundImage: `url(${song.album_cover})` }}\n//               className='card'\n//             >\n//               <h3>{song.song_name}</h3>\n//               {/* Additional song details can be added here */}\n//             </div>\n//           </TinderCard>\n//         ))}\n//       </div>\n//     </div>\n//   ) : (\n//     <span> Loading... </span>\n//   );\n// }\n\n// export default Advanced;\nvar _c;\n$RefreshReg$(_c, \"Advanced\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","useRef","TinderCard","Advanced","songs","setSongs","currentIndex","setCurrentIndex","isLoading","setIsLoading","lastDirection","setLastDirection","currentIndexRef","childRefs","Array","length","fill","map","createRef","ignoreStaleRequest","fetch","mode","then","response","ok","Error","statusText","console","log","json","data","song_info","catch","error","updateCurrentIndex","val","current","canGoBack","canSwipe","swiped","direction","nameToDelete","index","outOfFrame","name","idx","restoreCard","swipe","dir","goBack","newIndex","song","song_name","backgroundImage","album_cover"],"sources":["/Users/gunhaar/Desktop/441proj/moodmixx/src/examples/Advanced.js"],"sourcesContent":["// import React, { useState, useMemo, useRef } from 'react'\n// import TinderCard from 'react-tinder-card'\n\n// const db = [\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b27333b8541201f1ef38941024be\",\n//     album_name: \"evermore\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/a53fb417cdb223b78bca6144fdb8ba24ec21ebb2?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     artist_names: \"Taylor Swift\",\n//     song_name: 'gold rush',\n//   },\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b273f8553e18a11209d4becd0336\",\n//     album_name: \"Melodrama\",\n//     artist_names: \"Lorde\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/fa4496aca7ababab49280bebde9be00b1078182c?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     song_name: \"Hard Feelings\"\n\n//   },\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b2736d63fd3e1afa17b0d5563131\",\n//     album_name: \"This Is What It Feels Like\",\n//     artist_names: \"Gracie Abrams\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/9971c582b0fb3702a61963723e5c7dce69138449?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     song_name: \"Feels Like\"\n//   }\n// ]\n\n// function Advanced () {\n//   const [currentIndex, setCurrentIndex] = useState(db.length - 1)\n//   const [lastDirection, setLastDirection] = useState()\n//   const [song, setSong] = useState()\n//   // used for outOfFrame closure\n//   const currentIndexRef = useRef(currentIndex)\n\n//   const childRefs = useMemo(\n//     () =>\n//       Array(db.length)\n//         .fill(0)\n//         .map((i) => React.createRef()),\n//     []\n//   )\n\n//   const updateCurrentIndex = (val) => {\n//     setCurrentIndex(val)\n//     currentIndexRef.current = val\n//   }\n\n//   const canGoBack = currentIndex < db.length - 1\n\n//   const canSwipe = currentIndex >= 0\n\n//   // set last direction and decrease current index\n//   function stop() {\n//     console.log(\"song from react:\", song)\n//     song.pause();\n//     console.log(\"did this stop\")\n//   }\n\n//   const swiped = (direction, nameToDelete, index, song_preview) => {\n//     setLastDirection(direction)\n//     updateCurrentIndex(index - 1)\n//     stop();\n//   }\n\n//   const outOfFrame = (name, idx) => {\n//     console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n//     // handle the case in which go back is pressed before card goes outOfFrame\n//     currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n//     // TODO: when quickly swipe and restore multiple times the same card,\n//     // it happens multiple outOfFrame events are queued and the card disappear\n//     // during latest swipes. Only the last outOfFrame event should be considered valid\n//   }\n\n//   const swipe = async (dir) => {\n//     if (canSwipe && currentIndex < db.length) {\n//       await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\n//     }\n//   }\n\n//   // increase current index and show card\n//   const goBack = async () => {\n//     if (!canGoBack) return\n//     const newIndex = currentIndex + 1\n//     updateCurrentIndex(newIndex)\n//     await childRefs[newIndex].current.restoreCard()\n//   }\n\n//   function StartButton({ song_preview }) {\n//     function start() {\n//       const audio = new Audio(song_preview);\n//       console.log(\"song name:\", song_preview)\n//       audio.play()\n//       setSong(audio)\n//       console.log(\"is this playing lmao\")\n//     }\n\n//     return (\n//       <button onClick={start}>\n//         play!\n//       </button>\n//     );\n//   }\n\n//   function StopButton() {\n//     function stop() {\n//       console.log(\"song from react:\", song)\n//       song.pause();\n//       console.log(\"did this stop\")\n//     }\n\n//     return (\n//       <button onClick={stop}>\n//         pause!\n//       </button>\n//     );\n//   }\n\n//   return (\n//     <div>\n//       <link \n//         href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500&family=MuseoModerno:ital,wght@0,100..900;1,100..900&display=swap\" \n//         rel=\"stylesheet\"\n//       />\n//       <link\n//         href='https://fonts.googleapis.com/css?family=Alatsi&display=swap'\n//         rel='stylesheet'\n//       />\n//       <h1>moodmixx</h1>\n//       <div className='cardContainer'>\n//         {db.map((song, index) => (\n//           <div>\n//           <TinderCard\n//             ref={childRefs[index]}\n//             className='swipe'\n//             key={song.song_name}\n//             onSwipe={(dir) => swiped(dir, song.song_name, index, song.preview_url)}\n//             onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n//           >\n//             <div\n//               style={{ backgroundImage: 'url(' + song.album_cover + ')' }}\n//               className='card'\n//             >\n              \n//               <h2>{song.song_name}</h2>\n//               <p>\n//                 {song.album_name} <br></br>\n//                 {song.artist_names}\n//               </p>\n//             </div>\n//             <StartButton song_preview={song.preview_url} />\n//             {/* <StopButton /> */}\n//           </TinderCard>\n//           </div>\n//         ))}\n//       </div>\n//       <div className='buttons'>\n//         <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('left')}>Swipe left!</button>\n//         <button style={{ backgroundColor: !canGoBack && '#c3c4d3' }} onClick={() => goBack()}>Undo swipe!</button>\n//         <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('right')}>Swipe right!</button>\n//       </div>\n//       {lastDirection ? (\n//         <h2 key={lastDirection} className='infoText'>\n//           You swiped {lastDirection}\n//         </h2>\n//       ) : (\n//         <h2 className='infoText'>\n//           Swipe a card to get started!\n//         </h2>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default Advanced\n\n\nimport React, { useState, useMemo, useEffect, useRef } from 'react';\nimport TinderCard from 'react-tinder-card';\n\nfunction Advanced() {\n  const [songs, setSongs] = useState([]); // State to hold song data\n  const [currentIndex, setCurrentIndex] = useState(0); // Updated to start from 0\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastDirection, setLastDirection] = useState();\n\n  const currentIndexRef = useRef(currentIndex);\n  const childRefs = useMemo(() => Array(songs.length).fill(0).map(() => React.createRef()), [songs.length]);\n\n  // useEffect(() => {\n  //   // Fetch song data from Flask API\n  //   fetch('/saveDaylist/') // Adjust the endpoint as needed\n  //     .then(response => { response.json() })\n  //     .then(data => {\n  //       console.log(data)\n  //       setSongs(data.song_info); // Update state with song data\n  //       setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n  //     });\n  // }, []);\n\n  useEffect(() => {\n    // Declare a boolean flag that we can use to cancel the API request.\n    let ignoreStaleRequest = false;\n\n    // Call REST API to get the post's information\n    fetch(`http://localhost:8080/`, { mode: 'no-cors', })\n      .then((response) => {\n        if (!response.ok) throw Error(response.statusText);\n        console.log(response)\n        return response.json();\n      })\n      .then((data) => {\n        // If ignoreStaleRequest was set to true, we want to ignore the results of the\n        // the request. Otherwise, update the state to trigger a new render.\n        if (!ignoreStaleRequest) {\n          console.log(\"LOOK HERE\", data);\n          setIsLoading(false);\n          setSongs(data.song_info); // Update state with song data\n          setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n\n    return () => {\n      // This is a cleanup function that runs whenever the Post component\n      // unmounts or re-renders. If a Post is about to unmount or re-render, we\n      // should avoid updating state.\n      ignoreStaleRequest = true;\n    };\n  }, []);\n\n\n  const updateCurrentIndex = (val) => {\n    setCurrentIndex(val);\n    currentIndexRef.current = val;\n  };\n\n  const canGoBack = currentIndex < songs.length - 1;\n  const canSwipe = currentIndex >= 0;\n\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction);\n    updateCurrentIndex(index - 1);\n  };\n\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n  };\n\n  const swipe = async (dir) => {\n    if (canSwipe && currentIndex < songs.length) {\n      await childRefs[currentIndex].current.swipe(dir);\n    }\n  };\n\n  const goBack = async () => {\n    if (!canGoBack) return;\n    const newIndex = currentIndex + 1;\n    updateCurrentIndex(newIndex);\n    await childRefs[newIndex].current.restoreCard();\n  };\n\n  return !isLoading ? (\n    <div>\n      {/* Existing layout and CSS links */}\n      <h1>Spotify Tinder Cards</h1>\n      <div className='cardContainer'>\n        {songs.map((song, index) => (\n          <TinderCard\n            ref={childRefs[index]}\n            className='swipe'\n            key={song.song_name}\n            onSwipe={(dir) => swiped(dir, song.song_name, index)}\n            onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n          >\n            <div\n              style={{ backgroundImage: `url(${song.album_cover})` }}\n              className='card'\n            >\n              <h3>{song.song_name}</h3>\n              {/* Additional song details can be added here */}\n            </div>\n          </TinderCard>\n        ))}\n      </div>\n    </div>\n  ) : (\n    <span> Loading... </span>\n  );\n}\n\nexport default Advanced;\n\n// import React, { useState, useMemo, useRef, useEffect } from 'react';\n// import TinderCard from 'react-tinder-card'\n\n// const db = [\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b27333b8541201f1ef38941024be\",\n//     album_name: \"evermore\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/a53fb417cdb223b78bca6144fdb8ba24ec21ebb2?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     artist_names: \"Taylor Swift\",\n//     song_name: 'gold rush',\n//   },\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b273f8553e18a11209d4becd0336\",\n//     album_name: \"Melodrama\",\n//     artist_names: \"Lorde\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/fa4496aca7ababab49280bebde9be00b1078182c?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     song_name: \"Hard Feelings\"\n\n//   },\n//   {\n//     album_cover: \"https://i.scdn.co/image/ab67616d0000b2736d63fd3e1afa17b0d5563131\",\n//     album_name: \"This Is What It Feels Like\",\n//     artist_names: \"Gracie Abrams\",\n//     preview_url: \"https://p.scdn.co/mp3-preview/9971c582b0fb3702a61963723e5c7dce69138449?cid=6abcc9982c61471aa80eb04d331d9796\",\n//     song_name: \"Feels Like\"\n//   }\n// ]\n\n// function Advanced () {\n//   const [songs, setSongs] = useState([]);\n//   const [currentIndex, setCurrentIndex] = useState(0)\n//   const [lastDirection, setLastDirection] = useState()\n//   const [song, setSong] = useState()\n//   // used for outOfFrame closure\n//   const currentIndexRef = useRef(currentIndex)\n \n//   useEffect(() => {\n//     setCurrentIndex(songs.length - 1);\n//   }, [songs]);\n\n//   // Fetch songs from Flask on component mount\n//   useEffect(() => {\n//     fetch('http://127.0.0.1:8080/getDaylist')\n//       .then(response => response.json())\n//       .then(data => console.log(data))\n//       .catch(error => console.error('Error fetching songs:', error));\n//   }, []);\n//   const childRefs = useMemo(\n//     () =>\n//       Array(db.length)\n//         .fill(0)\n//         .map((i) => React.createRef()),\n//     []\n//   )\n\n//   const updateCurrentIndex = (val) => {\n//     setCurrentIndex(val)\n//     currentIndexRef.current = val\n//   }\n\n//   const canGoBack = currentIndex < db.length - 1\n\n//   const canSwipe = currentIndex >= 0\n\n//   // set last direction and decrease current index\n//   function stop() {\n//     console.log(\"song from react:\", song)\n//     song.pause();\n//     console.log(\"did this stop\")\n//   }\n\n//   const swiped = (direction, nameToDelete, index, song_preview) => {\n//     setLastDirection(direction)\n//     updateCurrentIndex(index - 1)\n//     stop();\n//   }\n\n//   const outOfFrame = (name, idx) => {\n//     console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n//     // handle the case in which go back is pressed before card goes outOfFrame\n//     currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n//     // TODO: when quickly swipe and restore multiple times the same card,\n//     // it happens multiple outOfFrame events are queued and the card disappear\n//     // during latest swipes. Only the last outOfFrame event should be considered valid\n//   }\n\n//   const swipe = async (dir) => {\n//     if (canSwipe && currentIndex < db.length) {\n//       await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\n//     }\n//   }\n\n//   // increase current index and show card\n//   const goBack = async () => {\n//     if (!canGoBack) return\n//     const newIndex = currentIndex + 1\n//     updateCurrentIndex(newIndex)\n//     await childRefs[newIndex].current.restoreCard()\n//   }\n\n//   function StartButton({ song_preview }) {\n//     function start() {\n//       const audio = new Audio(song_preview);\n//       console.log(\"song name:\", song_preview)\n//       audio.play()\n//       setSong(audio)\n//       console.log(\"is this playing lmao\")\n//     }\n\n//     return (\n//       <button onClick={start}>\n//         play!\n//       </button>\n//     );\n//   }\n\n//   function StopButton() {\n//     function stop() {\n//       console.log(\"song from react:\", song)\n//       song.pause();\n//       console.log(\"did this stop\")\n//     }\n\n//     return (\n//       <button onClick={stop}>\n//         pause!\n//       </button>\n//     );\n//   }\n\n//   return (\n//     <div>\n//       <link \n//         href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500&family=MuseoModerno:ital,wght@0,100..900;1,100..900&display=swap\" \n//         rel=\"stylesheet\"\n//       />\n//       <link\n//         href='https://fonts.googleapis.com/css?family=Alatsi&display=swap'\n//         rel='stylesheet'\n//       />\n//       <h1>moodmixx</h1>\n//       <div className='cardContainer'>\n//         {db.map((song, index) => (\n//           <div>\n//           <TinderCard\n//             ref={childRefs[index]}\n//             className='swipe'\n//             key={song.song_name}\n//             onSwipe={(dir) => swiped(dir, song.song_name, index, song.preview_url)}\n//             onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n//           >\n//             <div\n//               style={{ backgroundImage: 'url(' + song.album_cover + ')' }}\n//               className='card'\n//             >\n              \n//               <h2>{song.song_name}</h2>\n//               <p>\n//                 {song.album_name} <br></br>\n//                 {song.artist_names}\n//               </p>\n//             </div>\n//             <StartButton song_preview={song.preview_url} />\n//             {/* <StopButton /> */}\n//           </TinderCard>\n//           </div>\n//         ))}\n//       </div>\n//       <div className='buttons'>\n//         <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('left')}>Swipe left!</button>\n//         <button style={{ backgroundColor: !canGoBack && '#c3c4d3' }} onClick={() => goBack()}>Undo swipe!</button>\n//         <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('right')}>Swipe right!</button>\n//       </div>\n//       {lastDirection ? (\n//         <h2 key={lastDirection} className='infoText'>\n//           You swiped {lastDirection}\n//         </h2>\n//       ) : (\n//         <h2 className='infoText'>\n//           Swipe a card to get started!\n//         </h2>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default Advanced\n\n\n// import React, { useState, useMemo, useEffect, useRef } from 'react';\n// import TinderCard from 'react-tinder-card';\n\n// function Advanced() {\n//   const [songs, setSongs] = useState([]); // State to hold song data\n//   const [currentIndex, setCurrentIndex] = useState(0); // Updated to start from 0\n//   const [isLoading, setIsLoading] = useState(true);\n//   const [lastDirection, setLastDirection] = useState();\n\n//   const currentIndexRef = useRef(currentIndex);\n//   const childRefs = useMemo(() => Array(songs.length).fill(0).map(() => React.createRef()), [songs.length]);\n\n//   // useEffect(() => {\n//   //   // Fetch song data from Flask API\n//   //   fetch('/saveDaylist/') // Adjust the endpoint as needed\n//   //     .then(response => { response.json() })\n//   //     .then(data => {\n//   //       console.log(data)\n//   //       setSongs(data.song_info); // Update state with song data\n//   //       setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n//   //     });\n//   // }, []);\n\n//   useEffect(() => {\n//     // Declare a boolean flag that we can use to cancel the API request.\n//     let ignoreStaleRequest = false;\n\n//     // Call REST API to get the post's information\n//     fetch(`http://localhost:5000/`, { mode: 'no-cors', })\n//       .then((response) => {\n//         if (!response.ok) throw Error(response.statusText);\n//         console.log(response)\n//         return response.json();\n//       })\n//       .then((data) => {\n//         // If ignoreStaleRequest was set to true, we want to ignore the results of the\n//         // the request. Otherwise, update the state to trigger a new render.\n//         if (!ignoreStaleRequest) {\n//           console.log(\"LOOK HERE\", data);\n//           setIsLoading(false);\n//           setSongs(data.song_info); // Update state with song data\n//           setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         setIsLoading(false);\n//       });\n\n//     return () => {\n//       // This is a cleanup function that runs whenever the Post component\n//       // unmounts or re-renders. If a Post is about to unmount or re-render, we\n//       // should avoid updating state.\n//       ignoreStaleRequest = true;\n//     };\n//   }, []);\n\n\n//   const updateCurrentIndex = (val) => {\n//     setCurrentIndex(val);\n//     currentIndexRef.current = val;\n//   };\n\n//   const canGoBack = currentIndex < songs.length - 1;\n//   const canSwipe = currentIndex >= 0;\n\n//   const swiped = (direction, nameToDelete, index) => {\n//     setLastDirection(direction);\n//     updateCurrentIndex(index - 1);\n//   };\n\n//   const outOfFrame = (name, idx) => {\n//     console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n//     currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n//   };\n\n//   const swipe = async (dir) => {\n//     if (canSwipe && currentIndex < songs.length) {\n//       await childRefs[currentIndex].current.swipe(dir);\n//     }\n//   };\n\n//   const goBack = async () => {\n//     if (!canGoBack) return;\n//     const newIndex = currentIndex + 1;\n//     updateCurrentIndex(newIndex);\n//     await childRefs[newIndex].current.restoreCard();\n//   };\n\n//   return !isLoading ? (\n//     <div>\n//       {/* Existing layout and CSS links */}\n//       <h1>Spotify Tinder Cards</h1>\n//       <div className='cardContainer'>\n//         {songs.map((song, index) => (\n//           <TinderCard\n//             ref={childRefs[index]}\n//             className='swipe'\n//             key={song.song_name}\n//             onSwipe={(dir) => swiped(dir, song.song_name, index)}\n//             onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n//           >\n//             <div\n//               style={{ backgroundImage: `url(${song.album_cover})` }}\n//               className='card'\n//             >\n//               <h3>{song.song_name}</h3>\n//               {/* Additional song details can be added here */}\n//             </div>\n//           </TinderCard>\n//         ))}\n//       </div>\n//     </div>\n//   ) : (\n//     <span> Loading... </span>\n//   );\n// }\n\n// export default Advanced;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnE,OAAOC,UAAU,MAAM,mBAAmB;AAAC;AAE3C,SAASC,QAAQ,GAAG;EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,EAAE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},"metadata":{},"sourceType":"module"}