{"ast":null,"code":"var _jsxFileName = \"/Users/gunhaar/Desktop/441proj/moodmixx/src/examples/Advanced.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst db = [{\n  album_cover: \"https://i.scdn.co/image/ab67616d0000b27333b8541201f1ef38941024be\",\n  album_name: \"evermore\",\n  preview_url: \"https://p.scdn.co/mp3-preview/a53fb417cdb223b78bca6144fdb8ba24ec21ebb2?cid=6abcc9982c61471aa80eb04d331d9796\",\n  artist_names: \"Taylor Swift\",\n  song_name: 'gold rush'\n}, {\n  album_cover: \"https://i.scdn.co/image/ab67616d0000b273f8553e18a11209d4becd0336\",\n  album_name: \"Melodrama\",\n  artist_names: \"Lorde\",\n  preview_url: \"https://p.scdn.co/mp3-preview/fa4496aca7ababab49280bebde9be00b1078182c?cid=6abcc9982c61471aa80eb04d331d9796\",\n  song_name: \"Hard Feelings\"\n}, {\n  album_cover: \"https://i.scdn.co/image/ab67616d0000b2736d63fd3e1afa17b0d5563131\",\n  album_name: \"This Is What It Feels Like\",\n  artist_names: \"Gracie Abrams\",\n  preview_url: \"https://p.scdn.co/mp3-preview/9971c582b0fb3702a61963723e5c7dce69138449?cid=6abcc9982c61471aa80eb04d331d9796\",\n  song_name: \"Feels Like\"\n}];\nfunction Advanced() {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(db.length - 1);\n  const [lastDirection, setLastDirection] = useState();\n  const [song, setSong] = useState();\n  // used for outOfFrame closure\n  const currentIndexRef = useRef(currentIndex);\n  useEffect(() => {\n    setCurrentIndex(songs.length - 1);\n  }, [songs]);\n\n  // Fetch songs from Flask on component mount\n  useEffect(() => {\n    fetch('/getDaylist').then(response => response.json()).then(data => setSong(data.song_info)).catch(error => console.error('Error fetching songs:', error));\n  }, []);\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => /*#__PURE__*/React.createRef()), []);\n  const updateCurrentIndex = val => {\n    setCurrentIndex(val);\n    currentIndexRef.current = val;\n  };\n  const canGoBack = currentIndex < db.length - 1;\n  const canSwipe = currentIndex >= 0;\n\n  // set last direction and decrease current index\n  function stop() {\n    console.log(\"song from react:\", song);\n    song.pause();\n    console.log(\"did this stop\");\n  }\n  const swiped = (direction, nameToDelete, index, song_preview) => {\n    setLastDirection(direction);\n    updateCurrentIndex(index - 1);\n    stop();\n  };\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n    // handle the case in which go back is pressed before card goes outOfFrame\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n    // TODO: when quickly swipe and restore multiple times the same card,\n    // it happens multiple outOfFrame events are queued and the card disappear\n    // during latest swipes. Only the last outOfFrame event should be considered valid\n  };\n\n  const swipe = async dir => {\n    if (canSwipe && currentIndex < db.length) {\n      await childRefs[currentIndex].current.swipe(dir); // Swipe the card!\n    }\n  };\n\n  // increase current index and show card\n  const goBack = async () => {\n    if (!canGoBack) return;\n    const newIndex = currentIndex + 1;\n    updateCurrentIndex(newIndex);\n    await childRefs[newIndex].current.restoreCard();\n  };\n  function StartButton(_ref) {\n    let {\n      song_preview\n    } = _ref;\n    function start() {\n      const audio = new Audio(song_preview);\n      console.log(\"song name:\", song_preview);\n      audio.play();\n      setSong(audio);\n      console.log(\"is this playing lmao\");\n    }\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: start,\n      children: \"play!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n  function StopButton() {\n    function stop() {\n      console.log(\"song from react:\", song);\n      song.pause();\n      console.log(\"did this stop\");\n    }\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stop,\n      children: \"pause!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"link\", {\n      href: \"https://fonts.googleapis.com/css2?family=Inter:wght@400;500&family=MuseoModerno:ital,wght@0,100..900;1,100..900&display=swap\",\n      rel: \"stylesheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n      href: \"https://fonts.googleapis.com/css?family=Alatsi&display=swap\",\n      rel: \"stylesheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"moodmixx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardContainer\",\n      children: db.map((song, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TinderCard, {\n          ref: childRefs[index],\n          className: \"swipe\",\n          onSwipe: dir => swiped(dir, song.song_name, index, song.preview_url),\n          onCardLeftScreen: () => outOfFrame(song.song_name, index),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundImage: 'url(' + song.album_cover + ')'\n            },\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: song.song_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [song.album_name, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 35\n              }, this), song.artist_names]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n            song_preview: song.preview_url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, song.song_name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: !canSwipe && '#c3c4d3'\n        },\n        onClick: () => swipe('left'),\n        children: \"Swipe left!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: !canGoBack && '#c3c4d3'\n        },\n        onClick: () => goBack(),\n        children: \"Undo swipe!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: !canSwipe && '#c3c4d3'\n        },\n        onClick: () => swipe('right'),\n        children: \"Swipe right!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), lastDirection ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"infoText\",\n      children: [\"You swiped \", lastDirection]\n    }, lastDirection, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"infoText\",\n      children: \"Swipe a card to get started!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(Advanced, \"7aY62gqTSTIvPFjMJErz32KbDSI=\");\n_c = Advanced;\nexport default Advanced;\n\n// import React, { useState, useMemo, useEffect, useRef } from 'react';\n// import TinderCard from 'react-tinder-card';\n\n// function Advanced() {\n//   const [songs, setSongs] = useState([]); // State to hold song data\n//   const [currentIndex, setCurrentIndex] = useState(0); // Updated to start from 0\n//   const [isLoading, setIsLoading] = useState(true);\n//   const [lastDirection, setLastDirection] = useState();\n\n//   const currentIndexRef = useRef(currentIndex);\n//   const childRefs = useMemo(() => Array(songs.length).fill(0).map(() => React.createRef()), [songs.length]);\n\n//   // useEffect(() => {\n//   //   // Fetch song data from Flask API\n//   //   fetch('/saveDaylist/') // Adjust the endpoint as needed\n//   //     .then(response => { response.json() })\n//   //     .then(data => {\n//   //       console.log(data)\n//   //       setSongs(data.song_info); // Update state with song data\n//   //       setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n//   //     });\n//   // }, []);\n\n//   useEffect(() => {\n//     // Declare a boolean flag that we can use to cancel the API request.\n//     let ignoreStaleRequest = false;\n\n//     // Call REST API to get the post's information\n//     fetch(`http://localhost:5000/`, { mode: 'no-cors', })\n//       .then((response) => {\n//         if (!response.ok) throw Error(response.statusText);\n//         console.log(response)\n//         return response.json();\n//       })\n//       .then((data) => {\n//         // If ignoreStaleRequest was set to true, we want to ignore the results of the\n//         // the request. Otherwise, update the state to trigger a new render.\n//         if (!ignoreStaleRequest) {\n//           console.log(\"LOOK HERE\", data);\n//           setIsLoading(false);\n//           setSongs(data.song_info); // Update state with song data\n//           setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         setIsLoading(false);\n//       });\n\n//     return () => {\n//       // This is a cleanup function that runs whenever the Post component\n//       // unmounts or re-renders. If a Post is about to unmount or re-render, we\n//       // should avoid updating state.\n//       ignoreStaleRequest = true;\n//     };\n//   }, []);\n\n//   const updateCurrentIndex = (val) => {\n//     setCurrentIndex(val);\n//     currentIndexRef.current = val;\n//   };\n\n//   const canGoBack = currentIndex < songs.length - 1;\n//   const canSwipe = currentIndex >= 0;\n\n//   const swiped = (direction, nameToDelete, index) => {\n//     setLastDirection(direction);\n//     updateCurrentIndex(index - 1);\n//   };\n\n//   const outOfFrame = (name, idx) => {\n//     console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n//     currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n//   };\n\n//   const swipe = async (dir) => {\n//     if (canSwipe && currentIndex < songs.length) {\n//       await childRefs[currentIndex].current.swipe(dir);\n//     }\n//   };\n\n//   const goBack = async () => {\n//     if (!canGoBack) return;\n//     const newIndex = currentIndex + 1;\n//     updateCurrentIndex(newIndex);\n//     await childRefs[newIndex].current.restoreCard();\n//   };\n\n//   return !isLoading ? (\n//     <div>\n//       {/* Existing layout and CSS links */}\n//       <h1>Spotify Tinder Cards</h1>\n//       <div className='cardContainer'>\n//         {songs.map((song, index) => (\n//           <TinderCard\n//             ref={childRefs[index]}\n//             className='swipe'\n//             key={song.song_name}\n//             onSwipe={(dir) => swiped(dir, song.song_name, index)}\n//             onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n//           >\n//             <div\n//               style={{ backgroundImage: `url(${song.album_cover})` }}\n//               className='card'\n//             >\n//               <h3>{song.song_name}</h3>\n//               {/* Additional song details can be added here */}\n//             </div>\n//           </TinderCard>\n//         ))}\n//       </div>\n//     </div>\n//   ) : (\n//     <span> Loading... </span>\n//   );\n// }\n\n// export default Advanced;\nvar _c;\n$RefreshReg$(_c, \"Advanced\");","map":{"version":3,"names":["React","useState","useMemo","useRef","TinderCard","db","album_cover","album_name","preview_url","artist_names","song_name","Advanced","currentIndex","setCurrentIndex","length","lastDirection","setLastDirection","song","setSong","currentIndexRef","useEffect","songs","fetch","then","response","json","data","song_info","catch","error","console","childRefs","Array","fill","map","i","createRef","updateCurrentIndex","val","current","canGoBack","canSwipe","stop","log","pause","swiped","direction","nameToDelete","index","song_preview","outOfFrame","name","idx","restoreCard","swipe","dir","goBack","newIndex","StartButton","start","audio","Audio","play","StopButton","backgroundImage","backgroundColor"],"sources":["/Users/gunhaar/Desktop/441proj/moodmixx/src/examples/Advanced.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from 'react'\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n  {\n    album_cover: \"https://i.scdn.co/image/ab67616d0000b27333b8541201f1ef38941024be\",\n    album_name: \"evermore\",\n    preview_url: \"https://p.scdn.co/mp3-preview/a53fb417cdb223b78bca6144fdb8ba24ec21ebb2?cid=6abcc9982c61471aa80eb04d331d9796\",\n    artist_names: \"Taylor Swift\",\n    song_name: 'gold rush',\n  },\n  {\n    album_cover: \"https://i.scdn.co/image/ab67616d0000b273f8553e18a11209d4becd0336\",\n    album_name: \"Melodrama\",\n    artist_names: \"Lorde\",\n    preview_url: \"https://p.scdn.co/mp3-preview/fa4496aca7ababab49280bebde9be00b1078182c?cid=6abcc9982c61471aa80eb04d331d9796\",\n    song_name: \"Hard Feelings\"\n\n  },\n  {\n    album_cover: \"https://i.scdn.co/image/ab67616d0000b2736d63fd3e1afa17b0d5563131\",\n    album_name: \"This Is What It Feels Like\",\n    artist_names: \"Gracie Abrams\",\n    preview_url: \"https://p.scdn.co/mp3-preview/9971c582b0fb3702a61963723e5c7dce69138449?cid=6abcc9982c61471aa80eb04d331d9796\",\n    song_name: \"Feels Like\"\n  }\n]\n\nfunction Advanced () {\n  const [currentIndex, setCurrentIndex] = useState(db.length - 1)\n  const [lastDirection, setLastDirection] = useState()\n  const [song, setSong] = useState()\n  // used for outOfFrame closure\n  const currentIndexRef = useRef(currentIndex)\n \n  useEffect(() => {\n    setCurrentIndex(songs.length - 1);\n  }, [songs]);\n\n  // Fetch songs from Flask on component mount\n  useEffect(() => {\n    fetch('/getDaylist')\n      .then(response => response.json())\n      .then(data => setSong(data.song_info))\n      .catch(error => console.error('Error fetching songs:', error));\n  }, []);\n\n  const childRefs = useMemo(\n    () =>\n      Array(db.length)\n        .fill(0)\n        .map((i) => React.createRef()),\n    []\n  )\n\n  const updateCurrentIndex = (val) => {\n    setCurrentIndex(val)\n    currentIndexRef.current = val\n  }\n\n  const canGoBack = currentIndex < db.length - 1\n\n  const canSwipe = currentIndex >= 0\n\n  // set last direction and decrease current index\n  function stop() {\n    console.log(\"song from react:\", song)\n    song.pause();\n    console.log(\"did this stop\")\n  }\n\n  const swiped = (direction, nameToDelete, index, song_preview) => {\n    setLastDirection(direction)\n    updateCurrentIndex(index - 1)\n    stop();\n  }\n\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n    // handle the case in which go back is pressed before card goes outOfFrame\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n    // TODO: when quickly swipe and restore multiple times the same card,\n    // it happens multiple outOfFrame events are queued and the card disappear\n    // during latest swipes. Only the last outOfFrame event should be considered valid\n  }\n\n  const swipe = async (dir) => {\n    if (canSwipe && currentIndex < db.length) {\n      await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\n    }\n  }\n\n  // increase current index and show card\n  const goBack = async () => {\n    if (!canGoBack) return\n    const newIndex = currentIndex + 1\n    updateCurrentIndex(newIndex)\n    await childRefs[newIndex].current.restoreCard()\n  }\n\n  function StartButton({ song_preview }) {\n    function start() {\n      const audio = new Audio(song_preview);\n      console.log(\"song name:\", song_preview)\n      audio.play()\n      setSong(audio)\n      console.log(\"is this playing lmao\")\n    }\n\n    return (\n      <button onClick={start}>\n        play!\n      </button>\n    );\n  }\n\n  function StopButton() {\n    function stop() {\n      console.log(\"song from react:\", song)\n      song.pause();\n      console.log(\"did this stop\")\n    }\n\n    return (\n      <button onClick={stop}>\n        pause!\n      </button>\n    );\n  }\n\n  return (\n    <div>\n      <link \n        href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500&family=MuseoModerno:ital,wght@0,100..900;1,100..900&display=swap\" \n        rel=\"stylesheet\"\n      />\n      <link\n        href='https://fonts.googleapis.com/css?family=Alatsi&display=swap'\n        rel='stylesheet'\n      />\n      <h1>moodmixx</h1>\n      <div className='cardContainer'>\n        {db.map((song, index) => (\n          <div>\n          <TinderCard\n            ref={childRefs[index]}\n            className='swipe'\n            key={song.song_name}\n            onSwipe={(dir) => swiped(dir, song.song_name, index, song.preview_url)}\n            onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n          >\n            <div\n              style={{ backgroundImage: 'url(' + song.album_cover + ')' }}\n              className='card'\n            >\n              \n              <h2>{song.song_name}</h2>\n              <p>\n                {song.album_name} <br></br>\n                {song.artist_names}\n              </p>\n            </div>\n            <StartButton song_preview={song.preview_url} />\n            {/* <StopButton /> */}\n          </TinderCard>\n          </div>\n        ))}\n      </div>\n      <div className='buttons'>\n        <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('left')}>Swipe left!</button>\n        <button style={{ backgroundColor: !canGoBack && '#c3c4d3' }} onClick={() => goBack()}>Undo swipe!</button>\n        <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('right')}>Swipe right!</button>\n      </div>\n      {lastDirection ? (\n        <h2 key={lastDirection} className='infoText'>\n          You swiped {lastDirection}\n        </h2>\n      ) : (\n        <h2 className='infoText'>\n          Swipe a card to get started!\n        </h2>\n      )}\n    </div>\n  )\n}\n\nexport default Advanced\n\n\n// import React, { useState, useMemo, useEffect, useRef } from 'react';\n// import TinderCard from 'react-tinder-card';\n\n// function Advanced() {\n//   const [songs, setSongs] = useState([]); // State to hold song data\n//   const [currentIndex, setCurrentIndex] = useState(0); // Updated to start from 0\n//   const [isLoading, setIsLoading] = useState(true);\n//   const [lastDirection, setLastDirection] = useState();\n\n//   const currentIndexRef = useRef(currentIndex);\n//   const childRefs = useMemo(() => Array(songs.length).fill(0).map(() => React.createRef()), [songs.length]);\n\n//   // useEffect(() => {\n//   //   // Fetch song data from Flask API\n//   //   fetch('/saveDaylist/') // Adjust the endpoint as needed\n//   //     .then(response => { response.json() })\n//   //     .then(data => {\n//   //       console.log(data)\n//   //       setSongs(data.song_info); // Update state with song data\n//   //       setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n//   //     });\n//   // }, []);\n\n//   useEffect(() => {\n//     // Declare a boolean flag that we can use to cancel the API request.\n//     let ignoreStaleRequest = false;\n\n//     // Call REST API to get the post's information\n//     fetch(`http://localhost:5000/`, { mode: 'no-cors', })\n//       .then((response) => {\n//         if (!response.ok) throw Error(response.statusText);\n//         console.log(response)\n//         return response.json();\n//       })\n//       .then((data) => {\n//         // If ignoreStaleRequest was set to true, we want to ignore the results of the\n//         // the request. Otherwise, update the state to trigger a new render.\n//         if (!ignoreStaleRequest) {\n//           console.log(\"LOOK HERE\", data);\n//           setIsLoading(false);\n//           setSongs(data.song_info); // Update state with song data\n//           setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         setIsLoading(false);\n//       });\n\n//     return () => {\n//       // This is a cleanup function that runs whenever the Post component\n//       // unmounts or re-renders. If a Post is about to unmount or re-render, we\n//       // should avoid updating state.\n//       ignoreStaleRequest = true;\n//     };\n//   }, []);\n\n\n//   const updateCurrentIndex = (val) => {\n//     setCurrentIndex(val);\n//     currentIndexRef.current = val;\n//   };\n\n//   const canGoBack = currentIndex < songs.length - 1;\n//   const canSwipe = currentIndex >= 0;\n\n//   const swiped = (direction, nameToDelete, index) => {\n//     setLastDirection(direction);\n//     updateCurrentIndex(index - 1);\n//   };\n\n//   const outOfFrame = (name, idx) => {\n//     console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n//     currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n//   };\n\n//   const swipe = async (dir) => {\n//     if (canSwipe && currentIndex < songs.length) {\n//       await childRefs[currentIndex].current.swipe(dir);\n//     }\n//   };\n\n//   const goBack = async () => {\n//     if (!canGoBack) return;\n//     const newIndex = currentIndex + 1;\n//     updateCurrentIndex(newIndex);\n//     await childRefs[newIndex].current.restoreCard();\n//   };\n\n//   return !isLoading ? (\n//     <div>\n//       {/* Existing layout and CSS links */}\n//       <h1>Spotify Tinder Cards</h1>\n//       <div className='cardContainer'>\n//         {songs.map((song, index) => (\n//           <TinderCard\n//             ref={childRefs[index]}\n//             className='swipe'\n//             key={song.song_name}\n//             onSwipe={(dir) => swiped(dir, song.song_name, index)}\n//             onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n//           >\n//             <div\n//               style={{ backgroundImage: `url(${song.album_cover})` }}\n//               className='card'\n//             >\n//               <h3>{song.song_name}</h3>\n//               {/* Additional song details can be added here */}\n//             </div>\n//           </TinderCard>\n//         ))}\n//       </div>\n//     </div>\n//   ) : (\n//     <span> Loading... </span>\n//   );\n// }\n\n// export default Advanced;"],"mappings":"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IAAA;IAAA;IAAA;EAAA,QACG;AAEV;AAAC,GA5JQJ,QAAQ;AAAA,KAARA,QAAQ;AA8JjB,eAAeA,QAAQ;;AAGvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}