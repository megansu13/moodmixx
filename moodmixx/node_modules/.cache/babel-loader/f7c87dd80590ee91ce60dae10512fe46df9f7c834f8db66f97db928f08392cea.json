{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.complex = exports.color = exports.hsla = exports.hex = exports.rgba = exports.rgbUnit = exports.scale = exports.px = exports.percent = exports.degrees = exports.alpha = exports.number = undefined;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n}; /**\n    * Value types\n    *\n    * alpha\n    * degrees\n    * hex\n    * hsla\n    * percent\n    * px\n    * rgbUnit\n    * rgb\n    * scale\n    */\n\nvar _transformers = require('./transformers');\nvar _parsers = require('./parsers');\nvar _utils = require('./utils');\nvar number = exports.number = {\n  test: _utils.isNum,\n  parse: parseFloat\n};\n\n// Value types\nvar alpha = exports.alpha = _extends({}, number, {\n  transform: _transformers.alpha\n});\nvar degrees = exports.degrees = (0, _utils.createUnitType)('deg', _transformers.degrees);\nvar percent = exports.percent = (0, _utils.createUnitType)('%', _transformers.percent);\nvar px = exports.px = (0, _utils.createUnitType)('px', _transformers.px);\nvar scale = exports.scale = _extends({}, number, {\n  default: 1\n});\nvar rgbUnit = exports.rgbUnit = _extends({}, number, {\n  transform: _transformers.rgbUnit\n});\nvar rgba = exports.rgba = {\n  test: _utils.isRgb,\n  parse: _parsers.rgba,\n  transform: _transformers.rgba\n};\nvar hex = exports.hex = _extends({}, rgba, {\n  test: _utils.isHex,\n  parse: _parsers.hex\n});\nvar hsla = exports.hsla = {\n  test: _utils.isHsl,\n  parse: _parsers.hsla,\n  transform: _transformers.hsla\n};\nvar color = exports.color = {\n  parse: _parsers.color,\n  test: _utils.isColor,\n  transform: _transformers.color\n};\nvar FLOAT_REGEX = /(-)?(\\d[\\d\\.]*)/g;\nvar generateToken = function generateToken(token) {\n  return '${' + token + '}';\n};\nvar complex = exports.complex = {\n  test: function test(v) {\n    var matches = v.match && v.match(FLOAT_REGEX);\n    return (0, _utils.isArray)(matches) && matches.length > 1;\n  },\n  parse: function parse(v) {\n    var parsedValue = {};\n    v.match(FLOAT_REGEX).forEach(function (value, i) {\n      return parsedValue[i] = parseFloat(value);\n    });\n    return parsedValue;\n  },\n  createTransformer: function createTransformer(prop) {\n    var counter = 0;\n    var template = prop.replace(FLOAT_REGEX, function () {\n      return generateToken(counter++);\n    });\n    return function (v) {\n      var output = template;\n      for (var key in v) {\n        if (v.hasOwnProperty(key)) {\n          output = output.replace(generateToken(key), v[key]);\n        }\n      }\n      return output;\n    };\n  }\n};","map":{"version":3,"names":["_transformers","require","_parsers","_utils","number","exports","test","isNum","parse","parseFloat","alpha","_extends","transform","degrees","createUnitType","percent","px","scale","default","rgbUnit","rgba","isRgb","hex","isHex","hsla","isHsl","color","isColor","FLOAT_REGEX","generateToken","token","complex","v","matches","match","isArray","length","parsedValue","forEach","value","i","createTransformer","prop","counter","template","replace","output","key","hasOwnProperty"],"sources":["/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/node_modules/popmotion/src/inc/value-types.js"],"sourcesContent":["/**\n * Value types\n *\n * alpha\n * degrees\n * hex\n * hsla\n * percent\n * px\n * rgbUnit\n * rgb\n * scale\n */\nimport {\n  rgbUnit as transformRGBUnit,\n  rgba as transformRgba,\n  alpha as transformAlpha,\n  hsla as transformHsla,\n  color as transformColor,\n  px as transformPx,\n  percent as transformPercent,\n  degrees as transformDegrees\n} from './transformers';\nimport {\n  hex as parseHex,\n  rgba as parseRgba,\n  hsla as parseHsla,\n  color as parseColor\n} from './parsers';\nimport {\n  createUnitType,\n  isArray,\n  isNum,\n  isRgb,\n  isHsl,\n  isHex,\n  isColor\n} from './utils';\n\nexport const number = {\n  test: isNum,\n  parse: parseFloat\n};\n\n// Value types\nexport const alpha = {\n  ...number,\n  transform: transformAlpha\n};\n\nexport const degrees = createUnitType('deg', transformDegrees);\nexport const percent = createUnitType('%', transformPercent);\nexport const px = createUnitType('px', transformPx);\n\nexport const scale = {\n  ...number,\n  default: 1\n};\n\nexport const rgbUnit = {\n  ...number,\n  transform: transformRGBUnit\n};\n\nexport const rgba = {\n  test: isRgb,\n  parse: parseRgba,\n  transform: transformRgba\n};\n\nexport const hex = {\n  ...rgba,\n  test: isHex,\n  parse: parseHex\n};\n\nexport const hsla = {\n  test: isHsl,\n  parse: parseHsla,\n  transform: transformHsla\n};\n\nexport const color = {\n  parse: parseColor,\n  test: isColor,\n  transform: transformColor\n};\n\nconst FLOAT_REGEX = /(-)?(\\d[\\d\\.]*)/g;\nconst generateToken = (token) => '${' + token + '}';\nexport const complex = {\n  test: (v) => {\n    const matches = v.match && v.match(FLOAT_REGEX);\n    return (isArray(matches) && matches.length > 1);\n  },\n  parse: (v) => {\n    const parsedValue = {};\n    v.match(FLOAT_REGEX).forEach((value, i) => parsedValue[i] = parseFloat(value));\n    return parsedValue;\n  },\n  createTransformer: (prop) => {\n    let counter = 0;\n    const template = prop.replace(FLOAT_REGEX, () => generateToken(counter++));\n\n    return (v) => {\n      let output = template;\n      for (let key in v) {\n        if (v.hasOwnProperty(key)) {\n          output = output.replace(generateToken(key), v[key]);\n        }\n      }\n\n      return output;\n    };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}