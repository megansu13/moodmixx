{"ast":null,"code":"var _jsxFileName = \"/Users/gunhaar/Desktop/441proj/moodmixx/src/examples/Advanced.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useEffect, useRef } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Advanced() {\n  _s();\n  const [songs, setSongs] = useState([]); // State to hold song data\n  const [currentIndex, setCurrentIndex] = useState(0); // Updated to start from 0\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastDirection, setLastDirection] = useState();\n  const currentIndexRef = useRef(currentIndex);\n  const childRefs = useMemo(() => Array(songs.length).fill(0).map(() => /*#__PURE__*/React.createRef()), [songs.length]);\n\n  // useEffect(() => {\n  //   // Fetch song data from Flask API\n  //   fetch('/saveDaylist/') // Adjust the endpoint as needed\n  //     .then(response => { response.json() })\n  //     .then(data => {\n  //       console.log(data)\n  //       setSongs(data.song_info); // Update state with song data\n  //       setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n  //     });\n  // }, []);\n\n  useEffect(() => {\n    // Declare a boolean flag that we can use to cancel the API request.\n    let ignoreStaleRequest = false;\n\n    // Call REST API to get the post's information\n    fetch(`http://localhost:8080/`, {\n      mode: 'no-cors'\n    }).then(response => {\n      if (!response.ok) throw Error(response.statusText);\n      console.log(response);\n      return response.json();\n    }).then(data => {\n      // If ignoreStaleRequest was set to true, we want to ignore the results of the\n      // the request. Otherwise, update the state to trigger a new render.\n      if (!ignoreStaleRequest) {\n        console.log(\"LOOK HERE\", data);\n        setIsLoading(false);\n        setSongs(data.song_info); // Update state with song data\n        setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n      }\n    }).catch(error => {\n      console.log(error);\n      setIsLoading(false);\n    });\n    return () => {\n      // This is a cleanup function that runs whenever the Post component\n      // unmounts or re-renders. If a Post is about to unmount or re-render, we\n      // should avoid updating state.\n      ignoreStaleRequest = true;\n    };\n  }, []);\n  const updateCurrentIndex = val => {\n    setCurrentIndex(val);\n    currentIndexRef.current = val;\n  };\n  const canGoBack = currentIndex < songs.length - 1;\n  const canSwipe = currentIndex >= 0;\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction);\n    updateCurrentIndex(index - 1);\n  };\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n  };\n  const swipe = async dir => {\n    if (canSwipe && currentIndex < songs.length) {\n      await childRefs[currentIndex].current.swipe(dir);\n    }\n  };\n  const goBack = async () => {\n    if (!canGoBack) return;\n    const newIndex = currentIndex + 1;\n    updateCurrentIndex(newIndex);\n    await childRefs[newIndex].current.restoreCard();\n  };\n  return !isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Spotify Tinder Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardContainer\",\n      children: songs.map((song, index) => /*#__PURE__*/_jsxDEV(TinderCard, {\n        ref: childRefs[index],\n        className: \"swipe\",\n        onSwipe: dir => swiped(dir, song.song_name, index),\n        onCardLeftScreen: () => outOfFrame(song.song_name, index),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundImage: `url(${song.album_cover})`\n          },\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: song.song_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, song.song_name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \" Loading... \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(Advanced, \"EcH8DHB7yzKlAKZJsEeIeWv9DVs=\");\n_c = Advanced;\nexport default Advanced;\nvar _c;\n$RefreshReg$(_c, \"Advanced\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","useRef","TinderCard","Advanced","songs","setSongs","currentIndex","setCurrentIndex","isLoading","setIsLoading","lastDirection","setLastDirection","currentIndexRef","childRefs","Array","length","fill","map","createRef","ignoreStaleRequest","fetch","mode","then","response","ok","Error","statusText","console","log","json","data","song_info","catch","error","updateCurrentIndex","val","current","canGoBack","canSwipe","swiped","direction","nameToDelete","index","outOfFrame","name","idx","restoreCard","swipe","dir","goBack","newIndex","song","song_name","backgroundImage","album_cover"],"sources":["/Users/gunhaar/Desktop/441proj/moodmixx/src/examples/Advanced.js"],"sourcesContent":["import React, { useState, useMemo, useEffect, useRef } from 'react';\nimport TinderCard from 'react-tinder-card';\n\nfunction Advanced() {\n  const [songs, setSongs] = useState([]); // State to hold song data\n  const [currentIndex, setCurrentIndex] = useState(0); // Updated to start from 0\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastDirection, setLastDirection] = useState();\n\n  const currentIndexRef = useRef(currentIndex);\n  const childRefs = useMemo(() => Array(songs.length).fill(0).map(() => React.createRef()), [songs.length]);\n\n  // useEffect(() => {\n  //   // Fetch song data from Flask API\n  //   fetch('/saveDaylist/') // Adjust the endpoint as needed\n  //     .then(response => { response.json() })\n  //     .then(data => {\n  //       console.log(data)\n  //       setSongs(data.song_info); // Update state with song data\n  //       setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n  //     });\n  // }, []);\n\n  useEffect(() => {\n    // Declare a boolean flag that we can use to cancel the API request.\n    let ignoreStaleRequest = false;\n\n    // Call REST API to get the post's information\n    fetch(`http://localhost:8080/`, { mode: 'no-cors', })\n      .then((response) => {\n        if (!response.ok) throw Error(response.statusText);\n        console.log(response)\n        return response.json();\n      })\n      .then((data) => {\n        // If ignoreStaleRequest was set to true, we want to ignore the results of the\n        // the request. Otherwise, update the state to trigger a new render.\n        if (!ignoreStaleRequest) {\n          console.log(\"LOOK HERE\", data);\n          setIsLoading(false);\n          setSongs(data.song_info); // Update state with song data\n          setCurrentIndex(data.song_info.length - 1); // Set current index based on data length\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n\n    return () => {\n      // This is a cleanup function that runs whenever the Post component\n      // unmounts or re-renders. If a Post is about to unmount or re-render, we\n      // should avoid updating state.\n      ignoreStaleRequest = true;\n    };\n  }, []);\n\n\n  const updateCurrentIndex = (val) => {\n    setCurrentIndex(val);\n    currentIndexRef.current = val;\n  };\n\n  const canGoBack = currentIndex < songs.length - 1;\n  const canSwipe = currentIndex >= 0;\n\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction);\n    updateCurrentIndex(index - 1);\n  };\n\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n  };\n\n  const swipe = async (dir) => {\n    if (canSwipe && currentIndex < songs.length) {\n      await childRefs[currentIndex].current.swipe(dir);\n    }\n  };\n\n  const goBack = async () => {\n    if (!canGoBack) return;\n    const newIndex = currentIndex + 1;\n    updateCurrentIndex(newIndex);\n    await childRefs[newIndex].current.restoreCard();\n  };\n\n  return !isLoading ? (\n    <div>\n      {/* Existing layout and CSS links */}\n      <h1>Spotify Tinder Cards</h1>\n      <div className='cardContainer'>\n        {songs.map((song, index) => (\n          <TinderCard\n            ref={childRefs[index]}\n            className='swipe'\n            key={song.song_name}\n            onSwipe={(dir) => swiped(dir, song.song_name, index)}\n            onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n          >\n            <div\n              style={{ backgroundImage: `url(${song.album_cover})` }}\n              className='card'\n            >\n              <h3>{song.song_name}</h3>\n              {/* Additional song details can be added here */}\n            </div>\n          </TinderCard>\n        ))}\n      </div>\n    </div>\n  ) : (\n    <span> Loading... </span>\n  );\n}\n\nexport default Advanced;"],"mappings":"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"},"metadata":{},"sourceType":"module"}