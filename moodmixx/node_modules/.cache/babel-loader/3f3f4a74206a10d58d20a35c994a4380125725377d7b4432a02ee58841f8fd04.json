{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _ = require('./');\nvar _2 = _interopRequireDefault(_);\nvar _framesync = require('framesync');\nvar _calc = require('../inc/calc');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar Physics = function (_Action) {\n  _inherits(Physics, _Action);\n  function Physics() {\n    _classCallCheck(this, Physics);\n    return _possibleConstructorReturn(this, _Action.apply(this, arguments));\n  }\n  Physics.prototype.update = function update() {\n    var _props = this.props,\n      autoStopSpeed = _props.autoStopSpeed,\n      acceleration = _props.acceleration,\n      friction = _props.friction,\n      velocity = _props.velocity,\n      spring = _props.spring,\n      to = _props.to;\n    var newVelocity = velocity;\n    var elapsed = (0, _framesync.timeSinceLastFrame)();\n\n    // Apply acceleration to velocity\n    if (acceleration) {\n      newVelocity += (0, _calc.speedPerFrame)(acceleration, elapsed);\n    }\n\n    // Apply friction to velocity\n    if (friction) {\n      newVelocity *= Math.pow(1 - friction, elapsed / 100);\n    }\n    if (spring && to !== undefined) {\n      var distanceToTarget = to - this.current;\n      newVelocity += distanceToTarget * (0, _calc.speedPerFrame)(spring, elapsed);\n    }\n\n    // Apply velocity\n    this.current += (0, _calc.speedPerFrame)(newVelocity, elapsed);\n    this.props.velocity = newVelocity;\n\n    // Check if simulation is complete\n    // We do this here instead of `isActionComplete` as it allows us\n    // to clamp during this update\n    this.isComplete = autoStopSpeed !== false && (!newVelocity || Math.abs(newVelocity) <= autoStopSpeed);\n    if (this.isComplete && spring) {\n      this.current = to;\n    }\n    return this.current;\n  };\n  Physics.prototype.isActionComplete = function isActionComplete() {\n    return this.isComplete;\n  };\n  return Physics;\n}(_2.default);\nPhysics.defaultProps = {\n  acceleration: 0,\n  friction: 0,\n  velocity: 0,\n  autoStopSpeed: 0.001\n};\nexports.default = function (props) {\n  return new Physics(props);\n};","map":{"version":3,"names":["_","require","_framesync","_calc","Physics","update","_props","props","autoStopSpeed","acceleration","friction","velocity","spring","to","newVelocity","elapsed","timeSinceLastFrame","speedPerFrame","Math","pow","undefined","distanceToTarget","current","isComplete","abs","isActionComplete","defaultProps"],"sources":["/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/node_modules/popmotion/src/actions/physics.js"],"sourcesContent":["import Action from './';\nimport { timeSinceLastFrame } from 'framesync';\nimport { speedPerFrame } from '../inc/calc';\n\nclass Physics extends Action {\n  static defaultProps = {\n    acceleration: 0,\n    friction: 0,\n    velocity: 0,\n    autoStopSpeed: 0.001\n  }\n\n  update() {\n    const { autoStopSpeed, acceleration, friction, velocity, spring, to } = this.props;\n    let newVelocity = velocity;\n    const elapsed = timeSinceLastFrame();\n\n    // Apply acceleration to velocity\n    if (acceleration) {\n      newVelocity += speedPerFrame(acceleration, elapsed);\n    }\n\n    // Apply friction to velocity\n    if (friction) {\n      newVelocity *= (1 - friction) ** (elapsed / 100);\n    }\n\n    if (spring && to !== undefined) {\n      const distanceToTarget = to - this.current;\n      newVelocity += distanceToTarget * speedPerFrame(spring, elapsed);\n    }\n\n    // Apply velocity\n    this.current += speedPerFrame(newVelocity, elapsed);\n    this.props.velocity = newVelocity;\n\n    // Check if simulation is complete\n    // We do this here instead of `isActionComplete` as it allows us\n    // to clamp during this update\n    this.isComplete = (autoStopSpeed !== false && (!newVelocity || Math.abs(newVelocity) <= autoStopSpeed));\n\n    if (this.isComplete && spring) {\n      this.current = to;\n    }\n\n    return this.current;\n  }\n\n  isActionComplete() {\n    return this.isComplete;\n  }\n}\n\nexport default (props) => new Physics(props);\n"],"mappings":";;;AAAA,IAAAA,CAAA,GAAAC,OAAA;;AACA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,KAAA,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMG,O;;;;;;oBAQJC,M,qBAAS;IAAA,IAAAC,MAAA,GACiE,KAAKC,KADtE;MACCC,aADD,GAAAF,MAAA,CACCE,aADD;MACgBC,YADhB,GAAAH,MAAA,CACgBG,YADhB;MAC8BC,QAD9B,GAAAJ,MAAA,CAC8BI,QAD9B;MACwCC,QADxC,GAAAL,MAAA,CACwCK,QADxC;MACkDC,MADlD,GAAAN,MAAA,CACkDM,MADlD;MAC0DC,EAD1D,GAAAP,MAAA,CAC0DO,EAD1D;IAEP,IAAIC,WAAA,GAAcH,QAAlB;IACA,IAAMI,OAAA,GAAU,IAAAb,UAAA,CAAAc,kBAAA,GAAhB;;IAEA;IACA,IAAIP,YAAJ,EAAkB;MAChBK,WAAA,IAAe,IAAAX,KAAA,CAAAc,aAAA,EAAcR,YAAd,EAA4BM,OAA5B,CAAf;IACD;;IAED;IACA,IAAIL,QAAJ,EAAc;MACZI,WAAA,IAAAI,IAAA,CAAAC,GAAA,CAAgB,IAAIT,QAApB,EAAkCK,OAAA,GAAU,GAA5C;IACD;IAED,IAAIH,MAAA,IAAUC,EAAA,KAAOO,SAArB,EAAgC;MAC9B,IAAMC,gBAAA,GAAmBR,EAAA,GAAK,KAAKS,OAAnC;MACAR,WAAA,IAAeO,gBAAA,GAAmB,IAAAlB,KAAA,CAAAc,aAAA,EAAcL,MAAd,EAAsBG,OAAtB,CAAlC;IACD;;IAED;IACA,KAAKO,OAAL,IAAgB,IAAAnB,KAAA,CAAAc,aAAA,EAAcH,WAAd,EAA2BC,OAA3B,CAAhB;IACA,KAAKR,KAAL,CAAWI,QAAX,GAAsBG,WAAtB;;IAEA;IACA;IACA;IACA,KAAKS,UAAL,GAAmBf,aAAA,KAAkB,KAAlB,KAA4B,CAACM,WAAD,IAAgBI,IAAA,CAAKM,GAAL,CAASV,WAAT,KAAyBN,aAArE,CAAnB;IAEA,IAAI,KAAKe,UAAL,IAAmBX,MAAvB,EAA+B;MAC7B,KAAKU,OAAL,GAAeT,EAAf;IACD;IAED,OAAO,KAAKS,OAAZ;EACD,C;oBAEDG,gB,+BAAmB;IACjB,OAAO,KAAKF,UAAZ;EACD,C;;;AA9CGnB,O,CACGsB,Y,GAAe;EACpBjB,YAAA,EAAc,CADM;EAEpBC,QAAA,EAAU,CAFU;EAGpBC,QAAA,EAAU,CAHU;EAIpBH,aAAA,EAAe;AAJK,C;kBAgDT,UAACD,KAAD;EAAA,OAAW,IAAIH,OAAJ,CAAYG,KAAZ,CAAX;AAAA,C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}