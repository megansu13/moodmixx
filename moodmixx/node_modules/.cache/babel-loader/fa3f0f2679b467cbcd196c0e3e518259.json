{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.bezier = exports.blendColor = exports.alpha = exports.color = exports.hsla = exports.rgba = exports.rgbUnit = exports.px = exports.degrees = exports.percent = exports.transformChildValues = exports.steps = exports.snap = exports.smooth = exports.wrap = exports.nonlinearSpring = exports.spring = exports.generateNonIntergratedSpring = exports.multiply = exports.divide = exports.add = exports.subtract = exports.interpolate = exports.flow = exports.pipe = exports.conditional = exports.clamp = exports.clampMin = exports.clampMax = exports.applyOffset = exports.appendUnit = undefined;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _calc = require('./calc');\nvar _utils = require('./utils');\nvar _parsers = require('./parsers');\nvar _framesync = require('framesync');\nvar noop = function noop(v) {\n  return v;\n};\n\n/**\n * Append Unit\n * A function that will append\n * appendUnit('px', 20) -> '20px'\n * @param  {string} unit)\n * @return {number}\n */\nvar appendUnit = exports.appendUnit = function appendUnit(unit) {\n  return function (v) {\n    return '' + v + unit;\n  };\n};\n\n/**\n * Apply offset\n * A function that, given a value, will get the offset from `from`\n * and apply it to `to`\n * @param  {number} from\n * @param  {number} to\n * @return {function}\n */\nvar applyOffset = exports.applyOffset = function applyOffset(from, to) {\n  var getOffset = subtract(from);\n  var applyOffsetTo = add(to);\n  return function (v) {\n    return applyOffsetTo(getOffset(v));\n  };\n};\n\n/**\n * Clamp value between\n * Creates a function that will restrict a given value between `min` and `max`\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nvar clampMax = exports.clampMax = function clampMax(max) {\n  return function (v) {\n    return Math.min(v, max);\n  };\n};\nvar clampMin = exports.clampMin = function clampMin(min) {\n  return function (v) {\n    return Math.max(v, min);\n  };\n};\nvar clamp = exports.clamp = function clamp(min, max) {\n  var _min = clampMin(min);\n  var _max = clampMax(max);\n  return function (v) {\n    return _min(_max(v));\n  };\n};\nvar conditional = exports.conditional = function conditional(condition, ifTrue) {\n  var ifFalse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n  return function (v, action) {\n    return condition(v, action) ? ifTrue(v, action) : ifFalse(v, action);\n  };\n};\n\n/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nvar pipe = exports.pipe = function pipe() {\n  for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n    transformers[_key] = arguments[_key];\n  }\n  var numTransformers = transformers.length;\n  var i = 0;\n  return function (acc) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    var v = acc;\n    for (i = 0; i < numTransformers; i++) {\n      v = transformers[i].apply(transformers, [v].concat(args));\n    }\n    return v;\n  };\n};\n\n// Deprecated: Remove in 7.1.0\nvar flow = exports.flow = pipe;\n\n/**\n * Interpolate from set of values to another\n * @param  {Array} input array\n * @param  {Array} output\n * @param  {Function} rangeEasing\n * @return {Function}\n */\nvar interpolate = exports.interpolate = function interpolate(input, output, rangeEasing) {\n  var rangeLength = input.length;\n  var finalIndex = rangeLength - 1;\n  return function (v) {\n    // If value outside minimum range, quickly return\n    if (v <= input[0]) {\n      return output[0];\n    }\n\n    // If value outside maximum range, quickly return\n    if (v >= input[finalIndex]) {\n      return output[finalIndex];\n    }\n    var i = 1;\n\n    // Find index of range start\n    for (; i < rangeLength; i++) {\n      if (input[i] > v || i === finalIndex) {\n        break;\n      }\n    }\n    var progressInRange = (0, _calc.getProgressFromValue)(input[i - 1], input[i], v);\n    var easedProgress = rangeEasing ? rangeEasing[i - 1](progressInRange) : progressInRange;\n    return (0, _calc.getValueFromProgress)(output[i - 1], output[i], easedProgress);\n  };\n};\nvar subtract = exports.subtract = function subtract(origin) {\n  return function (v) {\n    return v - origin;\n  };\n};\nvar add = exports.add = function add(origin) {\n  return function (v) {\n    return v + origin;\n  };\n};\nvar divide = exports.divide = function divide(origin) {\n  return function (v) {\n    return v / origin;\n  };\n};\nvar multiply = exports.multiply = function multiply(origin) {\n  return function (v) {\n    return v * origin;\n  };\n};\nvar generateNonIntergratedSpring = exports.generateNonIntergratedSpring = function generateNonIntergratedSpring() {\n  var alterDisplacement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n  return function (constant, origin) {\n    return function (v) {\n      var displacement = origin - v;\n      var springModifiedDisplacement = -constant * (0 - alterDisplacement(Math.abs(displacement)));\n      return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;\n    };\n  };\n};\nvar spring = exports.spring = generateNonIntergratedSpring();\nvar nonlinearSpring = exports.nonlinearSpring = generateNonIntergratedSpring(Math.sqrt);\nvar wrap = exports.wrap = function wrap(min, max) {\n  return function (v) {\n    var rangeSize = max - min;\n    return ((v - min) % rangeSize + rangeSize) % rangeSize + min;\n  };\n};\nvar smooth = exports.smooth = function smooth() {\n  var strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  var previousValue = 0;\n  var lastUpdated = 0;\n  return function (v) {\n    var currentFramestamp = (0, _framesync.currentFrameTime)();\n    var timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;\n    var newValue = timeDelta ? (0, _calc.smooth)(v, previousValue, timeDelta, strength) : previousValue;\n    lastUpdated = currentFramestamp;\n    previousValue = newValue;\n    return newValue;\n  };\n};\nvar snap = exports.snap = function snap(points) {\n  if (typeof points === 'number') {\n    return function (v) {\n      return Math.round(v / points) * points;\n    };\n  } else {\n    var i = 0;\n    var numPoints = points.length;\n    return function (v) {\n      var lastDistance = Math.abs(points[0] - v);\n      for (i = 1; i < numPoints; i++) {\n        var point = points[i];\n        var distance = Math.abs(point - v);\n        if (distance === 0) return point;\n        if (distance > lastDistance) return points[i - 1];\n        if (i === numPoints - 1) return point;\n        lastDistance = distance;\n      }\n    };\n  }\n};\nvar steps = exports.steps = function steps(_steps) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'start';\n  return function (v) {\n    var progress = (0, _calc.getProgressFromValue)(min, max, v);\n    return (0, _calc.getValueFromProgress)(min, max, (0, _calc.stepProgress)(_steps, progress, direction));\n  };\n};\nvar transformChildValues = exports.transformChildValues = function transformChildValues(childTransformers) {\n  var mutableState = {};\n  return function (v) {\n    for (var key in v) {\n      var childTransformer = childTransformers[key];\n      if (childTransformer) {\n        mutableState[key] = childTransformer(v[key]);\n      }\n    }\n    return mutableState;\n  };\n};\n\n// Unit transformers\nvar percent = exports.percent = appendUnit('%');\nvar degrees = exports.degrees = appendUnit('deg');\nvar px = exports.px = appendUnit('px');\nvar rgbUnit = exports.rgbUnit = pipe(clamp(0, 255), Math.round);\nvar rgbaTemplate = function rgbaTemplate(_ref) {\n  var red = _ref.red,\n    green = _ref.green,\n    blue = _ref.blue,\n    _ref$alpha = _ref.alpha,\n    alpha = _ref$alpha === undefined ? 1 : _ref$alpha;\n  return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';\n};\nvar rgba = exports.rgba = pipe(transformChildValues({\n  red: rgbUnit,\n  green: rgbUnit,\n  blue: rgbUnit,\n  alpha: alpha\n}), rgbaTemplate);\nvar hslaTemplate = function hslaTemplate(_ref2) {\n  var hue = _ref2.hue,\n    saturation = _ref2.saturation,\n    lightness = _ref2.lightness,\n    _ref2$alpha = _ref2.alpha,\n    alpha = _ref2$alpha === undefined ? 1 : _ref2$alpha;\n  return 'hsla(' + hue + ', ' + saturation + ', ' + lightness + ', ' + alpha + ')';\n};\nvar hsla = exports.hsla = pipe(transformChildValues({\n  hue: parseInt,\n  saturation: percent,\n  lightness: percent,\n  alpha: alpha\n}), hslaTemplate);\nvar color = exports.color = function color(v) {\n  if (v.hasOwnProperty('red')) {\n    return rgba(v);\n  } else if (v.hasOwnProperty('hue')) {\n    return hsla(v);\n  }\n  return v;\n};\nvar alpha = exports.alpha = clamp(0, 1);\nvar blend = function blend(from, to, v) {\n  var fromExpo = from * from;\n  var toExpo = to * to;\n  return Math.sqrt(v * (toExpo - fromExpo) + fromExpo);\n};\n// http://codepen.io/osublake/pen/xGVVaN\nvar blendColor = exports.blendColor = function blendColor(from, to) {\n  var fromColor = (0, _utils.isString)(from) ? (0, _parsers.color)(from) : from;\n  var toColor = (0, _utils.isString)(to) ? (0, _parsers.color)(to) : to;\n  var blended = _extends({}, fromColor);\n  return function (v) {\n    for (var key in blended) {\n      blended[key] = blend(fromColor[key], toColor[key], v);\n    }\n    blended.red = blend(fromColor.red, toColor.red, v);\n    blended.green = blend(fromColor.green, toColor.green, v);\n    blended.blue = blend(fromColor.blue, toColor.blue, v);\n    blended.alpha = (0, _calc.getValueFromProgress)(fromColor.alpha, toColor.alpha, v);\n    return blended;\n  };\n};\n\n// Bezier resolver\n// Refactored from https://github.com/hughsk/bezier/blob/master/index.js\n/**\n## The MIT License (MIT) ##\n\nCopyright (c) 2013 Hugh Kennedy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n */\nvar resolve3 = function resolve3(points) {\n  return function (t) {\n    var ut = 1 - t;\n    return (points[0] * ut + points[1] * t) * ut + (points[1] * ut + points[2] * t) * t;\n  };\n};\nvar resolve4 = function resolve4(points) {\n  return function (t) {\n    var ut = 1 - t;\n    var a1 = points[1] * ut + points[2] * t;\n    return ((points[0] * ut + points[1] * t) * ut + a1 * t) * ut + (a1 * ut + (points[2] * ut + points[3] * t) * t) * t;\n  };\n};\nvar bezier = exports.bezier = function bezier(points) {\n  return points.length === 3 ? resolve3(points) : resolve4(points);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA,IAAMA,OAAO,SAAPA,IAAO,CAACC,CAAD;EAAA,OAAOA,CAAP;AAAA,CAAb;;AAEA;;;;;;;AAOO,IAAMC,kCAAa,SAAbA,UAAa,CAACC,IAAD;EAAA,OAAU,UAACF,CAAD;IAAA,YAAUA,CAAV,GAAcE,IAAd;EAAA,CAAV;AAAA,CAAnB;;AAEP;;;;;;;;AAQO,IAAMC,oCAAc,SAAdA,WAAc,CAACC,IAAD,EAAOC,EAAP,EAAc;EACvC,IAAMC,YAAYC,SAASH,IAAT,CAAlB;EACA,IAAMI,gBAAgBC,IAAIJ,EAAJ,CAAtB;EACA,OAAO,UAACL,CAAD;IAAA,OAAOQ,cAAcF,UAAUN,CAAV,CAAd,CAAP;EAAA,CAAP;AACD,CAJM;;AAMP;;;;;;;AAOO,IAAMU,8BAAW,SAAXA,QAAW,CAACC,GAAD;EAAA,OAAS,UAACX,CAAD;IAAA,OAAOY,KAAKC,GAAL,CAASb,CAAT,EAAYW,GAAZ,CAAP;EAAA,CAAT;AAAA,CAAjB;AACA,IAAMG,8BAAW,SAAXA,QAAW,CAACD,GAAD;EAAA,OAAS,UAACb,CAAD;IAAA,OAAOY,KAAKD,GAAL,CAASX,CAAT,EAAYa,GAAZ,CAAP;EAAA,CAAT;AAAA,CAAjB;AACA,IAAME,wBAAQ,SAARA,KAAQ,CAACF,GAAD,EAAMF,GAAN,EAAc;EACjC,IAAMK,OAAOF,SAASD,GAAT,CAAb;EACA,IAAMI,OAAOP,SAASC,GAAT,CAAb;EACA,OAAO,UAACX,CAAD;IAAA,OAAOgB,KAAKC,KAAKjB,CAAL,CAAL,CAAP;EAAA,CAAP;AACD,CAJM;AAMA,IAAMkB,oCAAc,SAAdA,WAAc,CAACC,SAAD,EAAYC,MAAZ;EAAA,IAAoBC,OAApB,uEAA8BtB,IAA9B;EAAA,OAAuC,UAACC,CAAD,EAAIsB,MAAJ,EAAe;IAC/E,OAAOH,UAAUnB,CAAV,EAAasB,MAAb,IAAuBF,OAAOpB,CAAP,EAAUsB,MAAV,CAAvB,GAA2CD,QAAQrB,CAAR,EAAWsB,MAAX,CAAlD;EACD,CAF0B;AAAA,CAApB;;AAIP;;;;;;;AAOO,IAAMC,sBAAO,SAAPA,IAAO,GAAqB;EAAA,kCAAjBC,YAAiB;IAAjBA,YAAiB;EAAA;EACvC,IAAMC,kBAAkBD,aAAaE,MAArC;EACA,IAAIC,IAAI,CAAR;EAEA,OAAO,UAACC,GAAD,EAAkB;IAAA,mCAATC,IAAS;MAATA,IAAS;IAAA;IACvB,IAAI7B,IAAI4B,GAAR;IACA,KAAKD,IAAI,CAAT,EAAYA,IAAIF,eAAhB,EAAiCE,GAAjC,EAAsC;MACpC3B,IAAIwB,aAAaG,CAAb,uBAAgB3B,CAAhB,SAAsB6B,IAAtB,EAAJ;IACD;IAED,OAAO7B,CAAP;EACD,CAPD;AAQD,CAZM;;AAcP;AACO,IAAM8B,sBAAOP,IAAb;;AAEP;;;;;;;AAOO,IAAMQ,oCAAc,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAgBC,WAAhB,EAAgC;EACzD,IAAMC,cAAcH,MAAMN,MAA1B;EACA,IAAMU,aAAaD,cAAc,CAAjC;EAEA,OAAO,UAACnC,CAAD,EAAO;IACZ;IACA,IAAIA,KAAKgC,MAAM,CAAN,CAAT,EAAmB;MACjB,OAAOC,OAAO,CAAP,CAAP;IACD;;IAED;IACA,IAAIjC,KAAKgC,MAAMI,UAAN,CAAT,EAA4B;MAC1B,OAAOH,OAAOG,UAAP,CAAP;IACD;IAED,IAAIT,IAAI,CAAR;;IAEA;IACA,OAAOA,IAAIQ,WAAX,EAAwBR,GAAxB,EAA6B;MAC3B,IAAIK,MAAML,CAAN,IAAW3B,CAAX,IAAgB2B,MAAMS,UAA1B,EAAsC;QACpC;MACD;IACF;IAED,IAAMC,kBAAkB,gCAAqBL,MAAML,IAAI,CAAV,CAArB,EAAmCK,MAAML,CAAN,CAAnC,EAA6C3B,CAA7C,CAAxB;IACA,IAAMsC,gBAAiBJ,WAAD,GAAgBA,YAAYP,IAAI,CAAhB,EAAmBU,eAAnB,CAAhB,GAAsDA,eAA5E;IACA,OAAO,gCAAqBJ,OAAON,IAAI,CAAX,CAArB,EAAoCM,OAAON,CAAP,CAApC,EAA+CW,aAA/C,CAAP;EACD,CAvBD;AAwBD,CA5BM;AA8BA,IAAM/B,8BAAW,SAAXA,QAAW,CAACgC,MAAD;EAAA,OAAY,UAACvC,CAAD;IAAA,OAAOA,IAAIuC,MAAX;EAAA,CAAZ;AAAA,CAAjB;AACA,IAAM9B,oBAAM,SAANA,GAAM,CAAC8B,MAAD;EAAA,OAAY,UAACvC,CAAD;IAAA,OAAOA,IAAIuC,MAAX;EAAA,CAAZ;AAAA,CAAZ;AACA,IAAMC,0BAAS,SAATA,MAAS,CAACD,MAAD;EAAA,OAAY,UAACvC,CAAD;IAAA,OAAOA,IAAIuC,MAAX;EAAA,CAAZ;AAAA,CAAf;AACA,IAAME,8BAAW,SAAXA,QAAW,CAACF,MAAD;EAAA,OAAY,UAACvC,CAAD;IAAA,OAAOA,IAAIuC,MAAX;EAAA,CAAZ;AAAA,CAAjB;AAEA,IAAMG,sEAA+B,SAA/BA,4BAA+B;EAAA,IAACC,iBAAD,uEAAqB5C,IAArB;EAAA,OAA8B,UAAC6C,QAAD,EAAWL,MAAX;IAAA,OAAsB,UAACvC,CAAD,EAAO;MACrG,IAAM6C,eAAeN,SAASvC,CAA9B;MACA,IAAM8C,6BAA6B,CAAEF,QAAF,IAAc,IAAID,kBAAkB/B,KAAKmC,GAAL,CAASF,YAAT,CAAlB,CAAlB,CAAnC;MACA,OAAQA,gBAAgB,CAAjB,GAAsBN,SAASO,0BAA/B,GAA4DP,SAASO,0BAA5E;IACD,CAJyE;EAAA,CAA9B;AAAA,CAArC;AAMA,IAAME,0BAASN,8BAAf;AACA,IAAMO,4CAAkBP,6BAA6B9B,KAAKsC,IAAlC,CAAxB;AAEA,IAAMC,sBAAO,SAAPA,IAAO,CAACtC,GAAD,EAAMF,GAAN;EAAA,OAAc,UAACX,CAAD,EAAO;IACvC,IAAMoD,YAAYzC,MAAME,GAAxB;IACA,OAAO,CAAC,CAACb,IAAIa,GAAL,IAAYuC,SAAZ,GAAwBA,SAAzB,IAAsCA,SAAtC,GAAkDvC,GAAzD;EACD,CAHmB;AAAA,CAAb;AAKA,IAAMwC,0BAAS,SAATA,MAAS,GAAmB;EAAA,IAAlBC,QAAkB,uEAAP,EAAO;EACvC,IAAIC,gBAAgB,CAApB;EACA,IAAIC,cAAc,CAAlB;EAEA,OAAO,UAACxD,CAAD,EAAO;IACZ,IAAMyD,oBAAoB,kCAA1B;IACA,IAAMC,YAAaD,sBAAsBD,WAAvB,GAAsCC,oBAAoBD,WAA1D,GAAwE,CAA1F;IACA,IAAMG,WAAWD,YAAY,kBAAc1D,CAAd,EAAiBuD,aAAjB,EAAgCG,SAAhC,EAA2CJ,QAA3C,CAAZ,GAAmEC,aAApF;IACAC,cAAcC,iBAAd;IACAF,gBAAgBI,QAAhB;IACA,OAAOA,QAAP;EACD,CAPD;AAQD,CAZM;AAcA,IAAMC,sBAAO,SAAPA,IAAO,CAACC,MAAD,EAAY;EAC9B,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,OAAO,UAAC7D,CAAD;MAAA,OAAOY,KAAKkD,KAAL,CAAW9D,IAAI6D,MAAf,IAAyBA,MAAhC;IAAA,CAAP;EACD,CAFD,MAEO;IACL,IAAIlC,IAAI,CAAR;IACA,IAAMoC,YAAYF,OAAOnC,MAAzB;IAEA,OAAO,UAAC1B,CAAD,EAAO;MACZ,IAAIgE,eAAepD,KAAKmC,GAAL,CAASc,OAAO,CAAP,IAAY7D,CAArB,CAAnB;MAEA,KAAK2B,IAAI,CAAT,EAAYA,IAAIoC,SAAhB,EAA2BpC,GAA3B,EAAgC;QAC9B,IAAMsC,QAAQJ,OAAOlC,CAAP,CAAd;QACA,IAAMuC,WAAWtD,KAAKmC,GAAL,CAASkB,QAAQjE,CAAjB,CAAjB;QAEA,IAAIkE,aAAa,CAAjB,EAAoB,OAAOD,KAAP;QAEpB,IAAIC,WAAWF,YAAf,EAA6B,OAAOH,OAAOlC,IAAI,CAAX,CAAP;QAE7B,IAAIA,MAAMoC,YAAY,CAAtB,EAAyB,OAAOE,KAAP;QAEzBD,eAAeE,QAAf;MACD;IACF,CAfD;EAgBD;AACF,CAxBM;AA0BA,IAAMC,wBAAQ,eAACA,MAAD;EAAA,IAAQtD,GAAR,uEAAc,CAAd;EAAA,IAAiBF,GAAjB,uEAAuB,CAAvB;EAAA,IAA0ByD,SAA1B,uEAAsC,OAAtC;EAAA,OAAkD,UAACpE,CAAD,EAAO;IAC5E,IAAMqE,WAAW,gCAAqBxD,GAArB,EAA0BF,GAA1B,EAA+BX,CAA/B,CAAjB;IACA,OAAO,gCAAqBa,GAArB,EAA0BF,GAA1B,EAA+B,wBAAawD,MAAb,EAAoBE,QAApB,EAA8BD,SAA9B,CAA/B,CAAP;EACD,CAHoB;AAAA,CAAd;AAKA,IAAME,sDAAuB,SAAvBA,oBAAuB,CAACC,iBAAD,EAAuB;EACzD,IAAMC,eAAe,EAArB;EACA,OAAO,UAACxE,CAAD,EAAO;IACZ,KAAK,IAAIyE,GAAT,IAAgBzE,CAAhB,EAAmB;MACjB,IAAM0E,mBAAmBH,kBAAkBE,GAAlB,CAAzB;MACA,IAAIC,gBAAJ,EAAsB;QACpBF,aAAaC,GAAb,IAAoBC,iBAAiB1E,EAAEyE,GAAF,CAAjB,CAApB;MACD;IACF;IAED,OAAOD,YAAP;EACD,CATD;AAUD,CAZM;;AAcP;AACO,IAAMG,4BAAU1E,WAAW,GAAX,CAAhB;AACA,IAAM2E,4BAAU3E,WAAW,KAAX,CAAhB;AACA,IAAM4E,kBAAK5E,WAAW,IAAX,CAAX;AAEA,IAAM6E,4BAAUvD,KACrBR,MAAM,CAAN,EAAS,GAAT,CADqB,EAErBH,KAAKkD,KAFgB,CAAhB;AAKP,IAAMiB,eAAe,SAAfA,YAAe;EAAA,IAAGC,GAAH,QAAGA,GAAH;IAAQC,KAAR,QAAQA,KAAR;IAAeC,IAAf,QAAeA,IAAf;IAAAC,kBAAqBC,KAArB;IAAqBA,KAArB,8BAA6B,CAA7B;EAAA,iBACXJ,GADW,UACHC,KADG,UACOC,IADP,UACgBE,KADhB;AAAA,CAArB;AAGO,IAAMC,sBAAO9D,KAClB+C,qBAAqB;EACnBU,KAAKF,OADc;EAEnBG,OAAOH,OAFY;EAGnBI,MAAMJ,OAHa;EAInBM;AAJmB,CAArB,CADkB,EAOlBL,YAPkB,CAAb;AAUP,IAAMO,eAAe,SAAfA,YAAe;EAAA,IAAGC,GAAH,SAAGA,GAAH;IAAQC,UAAR,SAAQA,UAAR;IAAoBC,SAApB,SAAoBA,SAApB;IAAAC,oBAA+BN,KAA/B;IAA+BA,KAA/B,+BAAuC,CAAvC;EAAA,iBACXG,GADW,UACHC,UADG,UACYC,SADZ,UAC0BL,KAD1B;AAAA,CAArB;AAGO,IAAMO,sBAAOpE,KAClB+C,qBAAqB;EACnBiB,KAAKK,QADc;EAEnBJ,YAAYb,OAFO;EAGnBc,WAAWd,OAHQ;EAInBS;AAJmB,CAArB,CADkB,EAOlBE,YAPkB,CAAb;AAUA,IAAMO,wBAAQ,SAARA,KAAQ,CAAC7F,CAAD,EAAO;EAC1B,IAAIA,EAAE8F,cAAF,CAAiB,KAAjB,CAAJ,EAA6B;IAC3B,OAAOT,KAAKrF,CAAL,CAAP;EACD,CAFD,MAEO,IAAIA,EAAE8F,cAAF,CAAiB,KAAjB,CAAJ,EAA6B;IAClC,OAAOH,KAAK3F,CAAL,CAAP;EACD;EACD,OAAOA,CAAP;AACD,CAPM;AASA,IAAMoF,wBAAQrE,MAAM,CAAN,EAAS,CAAT,CAAd;AAEP,IAAMgF,QAAQ,SAARA,KAAQ,CAAC3F,IAAD,EAAOC,EAAP,EAAWL,CAAX,EAAiB;EAC7B,IAAMgG,WAAW5F,OAAOA,IAAxB;EACA,IAAM6F,SAAS5F,KAAKA,EAApB;EACA,OAAOO,KAAKsC,IAAL,CAAUlD,KAAKiG,SAASD,QAAd,IAA0BA,QAApC,CAAP;AACD,CAJD;AAKA;AACO,IAAME,kCAAa,SAAbA,UAAa,CAAC9F,IAAD,EAAOC,EAAP,EAAc;EACtC,IAAM8F,YAAY,qBAAS/F,IAAT,IAAiB,oBAAWA,IAAX,CAAjB,GAAoCA,IAAtD;EACA,IAAMgG,UAAU,qBAAS/F,EAAT,IAAe,oBAAWA,EAAX,CAAf,GAA+BA,EAA/C;EAEA,IAAMgG,uBAAeF,SAAf,CAAN;EAEA,OAAO,UAACnG,CAAD,EAAO;IACZ,KAAK,IAAIyE,GAAT,IAAgB4B,OAAhB,EAAyB;MACvBA,QAAQ5B,GAAR,IAAesB,MAAMI,UAAU1B,GAAV,CAAN,EAAsB2B,QAAQ3B,GAAR,CAAtB,EAAoCzE,CAApC,CAAf;IACD;IACDqG,QAAQrB,GAAR,GAAce,MAAMI,UAAUnB,GAAhB,EAAqBoB,QAAQpB,GAA7B,EAAkChF,CAAlC,CAAd;IACAqG,QAAQpB,KAAR,GAAgBc,MAAMI,UAAUlB,KAAhB,EAAuBmB,QAAQnB,KAA/B,EAAsCjF,CAAtC,CAAhB;IACAqG,QAAQnB,IAAR,GAAea,MAAMI,UAAUjB,IAAhB,EAAsBkB,QAAQlB,IAA9B,EAAoClF,CAApC,CAAf;IACAqG,QAAQjB,KAAR,GAAgB,gCAAqBe,UAAUf,KAA/B,EAAsCgB,QAAQhB,KAA9C,EAAqDpF,CAArD,CAAhB;IACA,OAAOqG,OAAP;EACD,CATD;AAUD,CAhBM;;AAkBP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMC,WAAW,SAAXA,QAAW,CAACzC,MAAD;EAAA,OAAY,UAAC0C,CAAD,EAAO;IAClC,IAAMC,KAAK,IAAID,CAAf;IACA,OAAO,CAAC1C,OAAO,CAAP,IAAY2C,EAAZ,GAAiB3C,OAAO,CAAP,IAAY0C,CAA9B,IAAmCC,EAAnC,GAAwC,CAAC3C,OAAO,CAAP,IAAY2C,EAAZ,GAAiB3C,OAAO,CAAP,IAAY0C,CAA9B,IAAmCA,CAAlF;EACD,CAHgB;AAAA,CAAjB;AAKA,IAAME,WAAW,SAAXA,QAAW,CAAC5C,MAAD;EAAA,OAAY,UAAC0C,CAAD,EAAO;IAClC,IAAMC,KAAK,IAAID,CAAf;IACA,IAAMG,KAAK7C,OAAO,CAAP,IAAY2C,EAAZ,GAAiB3C,OAAO,CAAP,IAAY0C,CAAxC;IACA,OAAO,CAAC,CAAC1C,OAAO,CAAP,IAAY2C,EAAZ,GAAiB3C,OAAO,CAAP,IAAY0C,CAA9B,IAAmCC,EAAnC,GAAwCE,KAAKH,CAA9C,IAAmDC,EAAnD,GAAwD,CAACE,KAAKF,EAAL,GAAU,CAAC3C,OAAO,CAAP,IAAY2C,EAAZ,GAAiB3C,OAAO,CAAP,IAAY0C,CAA9B,IAAmCA,CAA9C,IAAmDA,CAAlH;EACD,CAJgB;AAAA,CAAjB;AAMO,IAAMI,0BAAS,SAATA,MAAS,CAAC9C,MAAD;EAAA,OACnBA,OAAOnC,MAAP,KAAkB,CAAnB,GAAwB4E,SAASzC,MAAT,CAAxB,GAA2C4C,SAAS5C,MAAT,CADvB;AAAA,CAAf","names":["noop","v","appendUnit","unit","applyOffset","from","to","getOffset","subtract","applyOffsetTo","add","clampMax","max","Math","min","clampMin","clamp","_min","_max","conditional","condition","ifTrue","ifFalse","action","pipe","transformers","numTransformers","length","i","acc","args","flow","interpolate","input","output","rangeEasing","rangeLength","finalIndex","progressInRange","easedProgress","origin","divide","multiply","generateNonIntergratedSpring","alterDisplacement","constant","displacement","springModifiedDisplacement","abs","spring","nonlinearSpring","sqrt","wrap","rangeSize","smooth","strength","previousValue","lastUpdated","currentFramestamp","timeDelta","newValue","snap","points","round","numPoints","lastDistance","point","distance","steps","direction","progress","transformChildValues","childTransformers","mutableState","key","childTransformer","percent","degrees","px","rgbUnit","rgbaTemplate","red","green","blue","_ref$alpha","alpha","rgba","hslaTemplate","hue","saturation","lightness","_ref2$alpha","hsla","parseInt","color","hasOwnProperty","blend","fromExpo","toExpo","blendColor","fromColor","toColor","blended","resolve3","t","ut","resolve4","a1","bezier"],"sources":["/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/node_modules/popmotion/src/inc/transformers.js"],"sourcesContent":["import { getProgressFromValue, getValueFromProgress, stepProgress, smooth as calcSmoothing } from './calc';\nimport { isString } from './utils';\nimport { color as parseColor } from './parsers';\nimport { currentFrameTime } from 'framesync';\n\nconst noop = (v) => v;\n\n/**\n * Append Unit\n * A function that will append\n * appendUnit('px', 20) -> '20px'\n * @param  {string} unit)\n * @return {number}\n */\nexport const appendUnit = (unit) => (v) => `${v}${unit}`;\n\n/**\n * Apply offset\n * A function that, given a value, will get the offset from `from`\n * and apply it to `to`\n * @param  {number} from\n * @param  {number} to\n * @return {function}\n */\nexport const applyOffset = (from, to) => {\n  const getOffset = subtract(from);\n  const applyOffsetTo = add(to);\n  return (v) => applyOffsetTo(getOffset(v));\n};\n\n/**\n * Clamp value between\n * Creates a function that will restrict a given value between `min` and `max`\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nexport const clampMax = (max) => (v) => Math.min(v, max);\nexport const clampMin = (min) => (v) => Math.max(v, min);\nexport const clamp = (min, max) => {\n  const _min = clampMin(min);\n  const _max = clampMax(max);\n  return (v) => _min(_max(v));\n};\n\nexport const conditional = (condition, ifTrue, ifFalse = noop) => (v, action) => {\n  return condition(v, action) ? ifTrue(v, action) : ifFalse(v, action);\n};\n\n/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nexport const pipe = (...transformers) => {\n  const numTransformers = transformers.length;\n  let i = 0;\n\n  return (acc, ...args) => {\n    let v = acc;\n    for (i = 0; i < numTransformers; i++) {\n      v = transformers[i](v, ...args);\n    }\n\n    return v;\n  };\n};\n\n// Deprecated: Remove in 7.1.0\nexport const flow = pipe;\n\n/**\n * Interpolate from set of values to another\n * @param  {Array} input array\n * @param  {Array} output\n * @param  {Function} rangeEasing\n * @return {Function}\n */\nexport const interpolate = (input, output, rangeEasing) => {\n  const rangeLength = input.length;\n  const finalIndex = rangeLength - 1;\n\n  return (v) => {\n    // If value outside minimum range, quickly return\n    if (v <= input[0]) {\n      return output[0];\n    }\n\n    // If value outside maximum range, quickly return\n    if (v >= input[finalIndex]) {\n      return output[finalIndex];\n    }\n\n    let i = 1;\n\n    // Find index of range start\n    for (; i < rangeLength; i++) {\n      if (input[i] > v || i === finalIndex) {\n        break;\n      }\n    }\n\n    const progressInRange = getProgressFromValue(input[i - 1], input[i], v);\n    const easedProgress = (rangeEasing) ? rangeEasing[i - 1](progressInRange) : progressInRange;\n    return getValueFromProgress(output[i - 1], output[i], easedProgress);\n  };\n};\n\nexport const subtract = (origin) => (v) => v - origin;\nexport const add = (origin) => (v) => v + origin;\nexport const divide = (origin) => (v) => v / origin;\nexport const multiply = (origin) => (v) => v * origin;\n\nexport const generateNonIntergratedSpring = (alterDisplacement = noop) => (constant, origin) => (v) => {\n  const displacement = origin - v;\n  const springModifiedDisplacement = - constant * (0 - alterDisplacement(Math.abs(displacement)));\n  return (displacement <= 0) ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;\n};\n\nexport const spring = generateNonIntergratedSpring();\nexport const nonlinearSpring = generateNonIntergratedSpring(Math.sqrt);\n\nexport const wrap = (min, max) => (v) => {\n  const rangeSize = max - min;\n  return ((v - min) % rangeSize + rangeSize) % rangeSize + min;\n};\n\nexport const smooth = (strength = 50) => {\n  let previousValue = 0;\n  let lastUpdated = 0;\n\n  return (v) => {\n    const currentFramestamp = currentFrameTime();\n    const timeDelta = (currentFramestamp !== lastUpdated) ? currentFramestamp - lastUpdated : 0;\n    const newValue = timeDelta ? calcSmoothing(v, previousValue, timeDelta, strength) : previousValue;\n    lastUpdated = currentFramestamp;\n    previousValue = newValue;\n    return newValue;\n  };\n};\n\nexport const snap = (points) => {\n  if (typeof points === 'number') {\n    return (v) => Math.round(v / points) * points;\n  } else {\n    let i = 0;\n    const numPoints = points.length;\n\n    return (v) => {\n      let lastDistance = Math.abs(points[0] - v);\n\n      for (i = 1; i < numPoints; i++) {\n        const point = points[i];\n        const distance = Math.abs(point - v);\n\n        if (distance === 0) return point;\n\n        if (distance > lastDistance) return points[i - 1];\n\n        if (i === numPoints - 1) return point;\n\n        lastDistance = distance;\n      }\n    };\n  }\n};\n\nexport const steps = (steps, min = 0, max = 1, direction = 'start') => (v) => {\n  const progress = getProgressFromValue(min, max, v);\n  return getValueFromProgress(min, max, stepProgress(steps, progress, direction));\n};\n\nexport const transformChildValues = (childTransformers) => {\n  const mutableState = {};\n  return (v) => {\n    for (let key in v) {\n      const childTransformer = childTransformers[key];\n      if (childTransformer) {\n        mutableState[key] = childTransformer(v[key]);\n      }\n    }\n\n    return mutableState;\n  };\n};\n\n// Unit transformers\nexport const percent = appendUnit('%');\nexport const degrees = appendUnit('deg');\nexport const px = appendUnit('px');\n\nexport const rgbUnit = pipe(\n  clamp(0, 255),\n  Math.round\n);\n\nconst rgbaTemplate = ({ red, green, blue, alpha = 1 }) =>\n  `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n\nexport const rgba = pipe(\n  transformChildValues({\n    red: rgbUnit,\n    green: rgbUnit,\n    blue: rgbUnit,\n    alpha\n  }),\n  rgbaTemplate\n);\n\nconst hslaTemplate = ({ hue, saturation, lightness, alpha = 1 }) =>\n  `hsla(${hue}, ${saturation}, ${lightness}, ${alpha})`;\n\nexport const hsla = pipe(\n  transformChildValues({\n    hue: parseInt,\n    saturation: percent,\n    lightness: percent,\n    alpha\n  }),\n  hslaTemplate\n);\n\nexport const color = (v) => {\n  if (v.hasOwnProperty('red')) {\n    return rgba(v);\n  } else if (v.hasOwnProperty('hue')) {\n    return hsla(v);\n  }\n  return v;\n};\n\nexport const alpha = clamp(0, 1);\n\nconst blend = (from, to, v) => {\n  const fromExpo = from * from;\n  const toExpo = to * to;\n  return Math.sqrt(v * (toExpo - fromExpo) + fromExpo);\n};\n// http://codepen.io/osublake/pen/xGVVaN\nexport const blendColor = (from, to) => {\n  const fromColor = isString(from) ? parseColor(from) : from;\n  const toColor = isString(to) ? parseColor(to): to;\n\n  const blended = { ...fromColor };\n\n  return (v) => {\n    for (let key in blended) {\n      blended[key] = blend(fromColor[key], toColor[key], v);\n    }\n    blended.red = blend(fromColor.red, toColor.red, v);\n    blended.green = blend(fromColor.green, toColor.green, v);\n    blended.blue = blend(fromColor.blue, toColor.blue, v);\n    blended.alpha = getValueFromProgress(fromColor.alpha, toColor.alpha, v);\n    return blended;\n  };\n};\n\n// Bezier resolver\n// Refactored from https://github.com/hughsk/bezier/blob/master/index.js\n/**\n## The MIT License (MIT) ##\n\nCopyright (c) 2013 Hugh Kennedy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n */\nconst resolve3 = (points) => (t) => {\n  const ut = 1 - t;\n  return (points[0] * ut + points[1] * t) * ut + (points[1] * ut + points[2] * t) * t;\n};\n\nconst resolve4 = (points) => (t) => {\n  const ut = 1 - t;\n  const a1 = points[1] * ut + points[2] * t;\n  return ((points[0] * ut + points[1] * t) * ut + a1 * t) * ut + (a1 * ut + (points[2] * ut + points[3] * t) * t) * t;\n};\n\nexport const bezier = (points) =>\n  (points.length === 3) ? resolve3(points) : resolve4(points);\n"]},"metadata":{},"sourceType":"script"}