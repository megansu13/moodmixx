{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = buildStylePropertyString;\nvar _transformProps = require('./transform-props');\nvar _transformProps2 = _interopRequireDefault(_transformProps);\nvar _valueTypes = require('./value-types');\nvar _valueTypes2 = _interopRequireDefault(_valueTypes);\nvar _prefixer = require('./prefixer');\nvar _prefixer2 = _interopRequireDefault(_prefixer);\nvar _utils = require('../../inc/utils');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar translate = _transformProps2.default.translate,\n  translateX = _transformProps2.default.translateX,\n  translateY = _transformProps2.default.translateY,\n  translateZ = _transformProps2.default.translateZ,\n  scale = _transformProps2.default.scale,\n  scaleX = _transformProps2.default.scaleX,\n  scaleY = _transformProps2.default.scaleY,\n  scaleZ = _transformProps2.default.scaleZ,\n  rotate = _transformProps2.default.rotate,\n  rotateX = _transformProps2.default.rotateX,\n  rotateY = _transformProps2.default.rotateY,\n  rotateZ = _transformProps2.default.rotateZ;\nvar translateMap = {\n  x: 'translateX',\n  y: 'translateY',\n  z: 'translateZ'\n};\nvar transformPropOrder = [translate, translateX, translateY, translateZ, scale, scaleX, scaleY, scaleZ, rotate, rotateX, rotateY, rotateZ];\nfunction sortTransformProps(a, b) {\n  return transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n}\nfunction buildStylePropertyString(element, state, changedValues, enableHardwareAcceleration) {\n  var propertyString = '';\n  var transformString = '';\n  var hasTransform = false;\n  var transformHasZ = false;\n\n  // First check if there are any changed transform values\n  // and if true add all transform values\n  var numChangedValues = changedValues.length;\n  for (var i = 0; i < numChangedValues; i++) {\n    var key = changedValues[i];\n\n    // If this is a transform property, add all other transform props\n    // to changedValues and then break\n    if (_transformProps2.default[key]) {\n      hasTransform = true;\n      for (var _key in state) {\n        if (_transformProps2.default[_key] && changedValues.indexOf(_key) === -1) {\n          changedValues.push(_key);\n        }\n      }\n      break;\n    }\n  }\n  changedValues.sort(sortTransformProps);\n\n  // Now run through each property, and decide which is a plain style props,\n  // a transform property and CSS vars and handle accordingly\n  var totalNumChangedValues = changedValues.length;\n  for (var _i = 0; _i < totalNumChangedValues; _i++) {\n    var _key2 = changedValues[_i];\n    var value = state[_key2];\n    if (translateMap[_key2]) {\n      _key2 = translateMap[_key2];\n    }\n\n    // If this is a number or object and we have filter, apply filter\n    if (_valueTypes2.default[_key2] && ((0, _utils.isNum)(value) || (0, _utils.isObj)(value)) && _valueTypes2.default[_key2].transform) {\n      value = _valueTypes2.default[_key2].transform(value);\n    }\n\n    // If a transform prop, add to transform string\n    if (_transformProps2.default[_key2]) {\n      transformString += _key2 + '(' + value + ') ';\n      transformHasZ = _key2 === translateMap.z ? true : transformHasZ;\n\n      // Or if a simple CSS property, set\n    } else {\n      propertyString += ';' + (0, _prefixer2.default)(_key2, true) + ':' + value;\n    }\n  }\n\n  // If we have transform props, build a transform string\n  if (hasTransform) {\n    if (!transformHasZ && enableHardwareAcceleration) {\n      transformString += translateMap.z + '(0)';\n    }\n    propertyString += ';' + (0, _prefixer2.default)('transform', true) + ':' + transformString;\n  }\n  element.style.cssText += propertyString;\n}","map":{"version":3,"mappings":"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","names":["buildStylePropertyString","translate","translateX","translateY","translateZ","scale","scaleX","scaleY","scaleZ","rotate","rotateX","rotateY","rotateZ","translateMap","x","y","z","transformPropOrder","sortTransformProps","a","b","indexOf","element","state","changedValues","enableHardwareAcceleration","propertyString","transformString","hasTransform","transformHasZ","numChangedValues","length","i","key","_transformProps2","push","sort","totalNumChangedValues","value","_valueTypes2","transform","style","cssText"],"sources":["/Users/gunhaar/Desktop/441proj/moodmixx/node_modules/popmotion/src/renderers/css/render.js"],"sourcesContent":["import transformProps from './transform-props';\nimport valueTypes from './value-types';\nimport prefixer from './prefixer';\nimport { isNum, isObj } from '../../inc/utils';\n\nconst {\n  translate,\n  translateX,\n  translateY,\n  translateZ,\n  scale,\n  scaleX,\n  scaleY,\n  scaleZ,\n  rotate,\n  rotateX,\n  rotateY,\n  rotateZ\n} = transformProps;\n\nconst translateMap = {\n  x: 'translateX',\n  y: 'translateY',\n  z: 'translateZ'\n};\n\nconst transformPropOrder = [\n  translate,\n  translateX,\n  translateY,\n  translateZ,\n  scale,\n  scaleX,\n  scaleY,\n  scaleZ,\n  rotate,\n  rotateX,\n  rotateY,\n  rotateZ\n];\n\nfunction sortTransformProps(a, b) {\n  return transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n}\n\nexport default function buildStylePropertyString(element, state, changedValues, enableHardwareAcceleration) {\n  let propertyString = '';\n  let transformString = '';\n  let hasTransform = false;\n  let transformHasZ = false;\n\n  // First check if there are any changed transform values\n  // and if true add all transform values\n  const numChangedValues = changedValues.length;\n  for (let i = 0; i < numChangedValues; i++) {\n    let key = changedValues[i];\n\n    // If this is a transform property, add all other transform props\n    // to changedValues and then break\n    if (transformProps[key]) {\n      hasTransform = true;\n\n      for (let key in state) {\n        if (transformProps[key] && changedValues.indexOf(key) === -1) {\n          changedValues.push(key);\n        }\n      }\n\n      break;\n    }\n  }\n\n  changedValues.sort(sortTransformProps);\n\n  // Now run through each property, and decide which is a plain style props,\n  // a transform property and CSS vars and handle accordingly\n  const totalNumChangedValues = changedValues.length;\n  for (let i = 0; i < totalNumChangedValues; i++) {\n    let key = changedValues[i];\n    let value = state[key];\n\n    if (translateMap[key]) {\n      key = translateMap[key];\n    }\n\n    // If this is a number or object and we have filter, apply filter\n    if (valueTypes[key] && (isNum(value) || isObj(value)) && valueTypes[key].transform) {\n      value = valueTypes[key].transform(value);\n    }\n\n    // If a transform prop, add to transform string\n    if (transformProps[key]) {\n      transformString += key + '(' + value + ') ';\n      transformHasZ = (key === translateMap.z) ? true : transformHasZ;\n\n    // Or if a simple CSS property, set\n    } else {\n      propertyString += ';' + prefixer(key, true) + ':' + value;\n    }\n  }\n\n  // If we have transform props, build a transform string\n  if (hasTransform) {\n    if (!transformHasZ && enableHardwareAcceleration) {\n      transformString += translateMap.z + '(0)';\n    }\n\n    propertyString += ';' + prefixer('transform', true) + ':' + transformString;\n  }\n\n  element.style.cssText += propertyString;\n}\n"]},"metadata":{},"sourceType":"script"}