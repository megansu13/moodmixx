{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nexports.splitColorValues = splitColorValues;\nvar varType = function varType(variable) {\n  return Object.prototype.toString.call(variable).slice(8, -1);\n};\nvar CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;\nvar REPLACE_TEMPLATE = '$1-$2';\n\n/*\n  Convert camelCase to dash-case\n\n  @param [string]\n  @return [string]\n*/\nvar camelToDash = exports.camelToDash = function camelToDash(string) {\n  return string.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();\n};\nvar setDOMAttrs = exports.setDOMAttrs = function setDOMAttrs(element, attrs) {\n  for (var key in attrs) {\n    if (attrs.hasOwnProperty(key)) {\n      element.setAttribute(key, attrs[key]);\n    }\n  }\n};\n/*\n  Split comma-delimited string\n\n  \"foo,bar\" -> [\"foo\", \"bar\"]\n\n  @param [string]\n  @return [array]\n*/\nvar splitCommaDelimited = exports.splitCommaDelimited = function splitCommaDelimited(value) {\n  return isString(value) ? value.split(/,\\s*/) : [value];\n};\n\n/**\n *  Returns a function that will check any argument for `term`\n * `contains('needle')('haystack')`\n */\nvar contains = exports.contains = function contains(term) {\n  return function (v) {\n    return isString(term) && v.indexOf(term) !== -1;\n  };\n};\n\n/**\n *  Returns a function that will check to see if an argument is\n *  the first characters in the provided `term`\n * `isFirstChars('needle')('haystack')`\n */\nvar isFirstChars = exports.isFirstChars = function isFirstChars(term) {\n  return function (v) {\n    return isString(term) && v.indexOf(term) === 0;\n  };\n};\n\n/**\n * Create a unit value type\n */\nvar createUnitType = exports.createUnitType = function createUnitType(type, transform) {\n  return {\n    test: contains(type),\n    parse: parseFloat,\n    transform: transform\n  };\n};\n\n/*\n  Get value from function string\n  \"translateX(20px)\" -> \"20px\"\n*/\nvar getValueFromFunctionString = exports.getValueFromFunctionString = function getValueFromFunctionString(value) {\n  return value.substring(value.indexOf('(') + 1, value.lastIndexOf(')'));\n};\n\n/**\n * Creates a function that will split color\n * values from string into an object of properties\n * `mapArrayToObject(['red', 'green', 'blue'])('rgba(0,0,0)')`\n */\nfunction splitColorValues(terms) {\n  var numTerms = terms.length;\n  return function (v) {\n    var values = {};\n    var valuesArray = splitCommaDelimited(getValueFromFunctionString(v));\n    for (var i = 0; i < numTerms; i++) {\n      values[terms[i]] = valuesArray[i] !== undefined ? parseFloat(valuesArray[i]) : 1;\n    }\n    return values;\n  };\n}\n\n/*\n  Is utils var an array ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Array'\n*/\nvar isArray = exports.isArray = function isArray(arr) {\n  return varType(arr) === 'Array';\n};\n\n/*\n  Is utils var a function ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Function'\n*/\nvar isFunc = exports.isFunc = function isFunc(obj) {\n  return varType(obj) === 'Function';\n};\n\n/*\n  Is utils var a number?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'number'\n*/\nvar isNum = exports.isNum = function isNum(num) {\n  return typeof num === 'number';\n};\n\n/*\n  Is utils var an object?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'object'\n*/\nvar isObj = exports.isObj = function isObj(obj) {\n  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n};\n\n/*\n  Is utils var a string ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof str === 'string'\n*/\nvar isString = exports.isString = function isString(str) {\n  return typeof str === 'string';\n};\nvar isHex = exports.isHex = isFirstChars('#');\nvar isRgb = exports.isRgb = isFirstChars('rgb');\nvar isHsl = exports.isHsl = isFirstChars('hsl');\nvar isColor = exports.isColor = function isColor(v) {\n  return isHex(v) || isRgb(v) || isHsl(v);\n};","map":{"version":3,"mappings":";;;;;;;;QAqEgBA,gB,GAAAA,gB;AArEhB,IAAMC,UAAU,SAAVA,OAAU,CAACC,QAAD;EAAA,OAAcC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,QAA/B,EAAyCK,KAAzC,CAA+C,CAA/C,EAAkD,CAAC,CAAnD,CAAd;AAAA,CAAhB;AAEA,IAAMC,qBAAqB,iBAA3B;AACA,IAAMC,mBAAmB,OAAzB;;AAEA;;;;;;AAMO,IAAMC,oCAAc,SAAdA,WAAc,CAACC,MAAD;EAAA,OAAYA,OAAOC,OAAP,CAAeJ,kBAAf,EAAmCC,gBAAnC,EAAqDI,WAArD,EAAZ;AAAA,CAApB;AAEA,IAAMC,oCAAc,SAAdA,WAAc,CAACC,OAAD,EAAUC,KAAV,EAAoB;EAC7C,KAAK,IAAIC,GAAT,IAAgBD,KAAhB,EAAuB;IACrB,IAAIA,MAAME,cAAN,CAAqBD,GAArB,CAAJ,EAA+B;MAC7BF,QAAQI,YAAR,CAAqBF,GAArB,EAA0BD,MAAMC,GAAN,CAA1B;IACD;EACF;AACF,CANM;AAOP;;;;;;;;AAQO,IAAMG,oDAAsB,SAAtBA,mBAAsB,CAACC,KAAD;EAAA,OAAWC,SAASD,KAAT,IAAkBA,MAAME,KAAN,CAAY,MAAZ,CAAlB,GAAwC,CAACF,KAAD,CAAnD;AAAA,CAA5B;;AAEP;;;;AAIO,IAAMG,8BAAW,SAAXA,QAAW,CAACC,IAAD;EAAA,OAAU,UAACC,CAAD,EAAO;IACvC,OAAQJ,SAASG,IAAT,KAAkBC,EAAEC,OAAF,CAAUF,IAAV,MAAoB,CAAC,CAA/C;EACD,CAFuB;AAAA,CAAjB;;AAIP;;;;;AAKO,IAAMG,sCAAe,SAAfA,YAAe,CAACH,IAAD;EAAA,OAAU,UAACC,CAAD,EAAO;IAC3C,OAAQJ,SAASG,IAAT,KAAkBC,EAAEC,OAAF,CAAUF,IAAV,MAAoB,CAA9C;EACD,CAF2B;AAAA,CAArB;;AAIP;;;AAGO,IAAMI,0CAAiB,SAAjBA,cAAiB,CAACC,IAAD,EAAOC,SAAP,EAAqB;EACjD,OAAO;IACLC,MAAMR,SAASM,IAAT,CADD;IAELG,OAAOC,UAFF;IAGLH;EAHK,CAAP;AAKD,CANM;;AAQP;;;;AAIO,IAAMI,kEAA6B,SAA7BA,0BAA6B,CAACd,KAAD;EAAA,OAAWA,MAAMe,SAAN,CAAgBf,MAAMM,OAAN,CAAc,GAAd,IAAqB,CAArC,EAAwCN,MAAMgB,WAAN,CAAkB,GAAlB,CAAxC,CAAX;AAAA,CAAnC;;AAEP;;;;;AAKO,SAASrC,gBAAT,CAA0BsC,KAA1B,EAAiC;EACtC,IAAMC,WAAWD,MAAME,MAAvB;EAEA,OAAO,UAAUd,CAAV,EAAa;IAClB,IAAMe,SAAS,EAAf;IACA,IAAMC,cAActB,oBAAoBe,2BAA2BT,CAA3B,CAApB,CAApB;IAEA,KAAK,IAAIiB,IAAI,CAAb,EAAgBA,IAAIJ,QAApB,EAA8BI,GAA9B,EAAmC;MACjCF,OAAOH,MAAMK,CAAN,CAAP,IAAoBD,YAAYC,CAAZ,MAAmBC,SAApB,GAAiCV,WAAWQ,YAAYC,CAAZ,CAAX,CAAjC,GAA8D,CAAjF;IACD;IAED,OAAOF,MAAP;EACD,CATD;AAUD;;AAED;;;;;;AAMO,IAAMI,4BAAU,SAAVA,OAAU,CAACC,GAAD;EAAA,OAAS7C,QAAQ6C,GAAR,MAAiB,OAA1B;AAAA,CAAhB;;AAEP;;;;;;AAMO,IAAMC,0BAAS,SAATA,MAAS,CAACC,GAAD;EAAA,OAAS/C,QAAQ+C,GAAR,MAAiB,UAA1B;AAAA,CAAf;;AAEP;;;;;;AAMO,IAAMC,wBAAQ,SAARA,KAAQ,CAACC,GAAD;EAAA,OAAS,OAAOA,GAAP,KAAe,QAAxB;AAAA,CAAd;;AAEP;;;;;;AAMO,IAAMC,wBAAQ,SAARA,KAAQ,CAACH,GAAD;EAAA,OAAS,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAxB;AAAA,CAAd;;AAEP;;;;;;AAMO,IAAM1B,8BAAW,SAAXA,QAAW,CAAC8B,GAAD;EAAA,OAAS,OAAOA,GAAP,KAAe,QAAxB;AAAA,CAAjB;AAEA,IAAMC,wBAAQzB,aAAa,GAAb,CAAd;AACA,IAAM0B,wBAAQ1B,aAAa,KAAb,CAAd;AACA,IAAM2B,wBAAQ3B,aAAa,KAAb,CAAd;AACA,IAAM4B,4BAAU,SAAVA,OAAU,CAAC9B,CAAD;EAAA,OAAQ2B,MAAM3B,CAAN,KAAY4B,MAAM5B,CAAN,CAAZ,IAAwB6B,MAAM7B,CAAN,CAAhC;AAAA,CAAhB","names":["splitColorValues","varType","variable","Object","prototype","toString","call","slice","CAMEL_CASE_PATTERN","REPLACE_TEMPLATE","camelToDash","string","replace","toLowerCase","setDOMAttrs","element","attrs","key","hasOwnProperty","setAttribute","splitCommaDelimited","value","isString","split","contains","term","v","indexOf","isFirstChars","createUnitType","type","transform","test","parse","parseFloat","getValueFromFunctionString","substring","lastIndexOf","terms","numTerms","length","values","valuesArray","i","undefined","isArray","arr","isFunc","obj","isNum","num","isObj","str","isHex","isRgb","isHsl","isColor"],"sources":["/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/node_modules/popmotion/src/inc/utils.js"],"sourcesContent":["const varType = (variable) => Object.prototype.toString.call(variable).slice(8, -1);\n\nconst CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;\nconst REPLACE_TEMPLATE = '$1-$2';\n\n/*\n  Convert camelCase to dash-case\n\n  @param [string]\n  @return [string]\n*/\nexport const camelToDash = (string) => string.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();\n\nexport const setDOMAttrs = (element, attrs) => {\n  for (let key in attrs) {\n    if (attrs.hasOwnProperty(key)) {\n      element.setAttribute(key, attrs[key]);\n    }\n  }\n};\n/*\n  Split comma-delimited string\n\n  \"foo,bar\" -> [\"foo\", \"bar\"]\n\n  @param [string]\n  @return [array]\n*/\nexport const splitCommaDelimited = (value) => isString(value) ? value.split(/,\\s*/) : [value];\n\n/**\n *  Returns a function that will check any argument for `term`\n * `contains('needle')('haystack')`\n */\nexport const contains = (term) => (v) => {\n  return (isString(term) && v.indexOf(term) !== -1);\n};\n\n/**\n *  Returns a function that will check to see if an argument is\n *  the first characters in the provided `term`\n * `isFirstChars('needle')('haystack')`\n */\nexport const isFirstChars = (term) => (v) => {\n  return (isString(term) && v.indexOf(term) === 0);\n};\n\n/**\n * Create a unit value type\n */\nexport const createUnitType = (type, transform) => {\n  return {\n    test: contains(type),\n    parse: parseFloat,\n    transform\n  };\n};\n\n/*\n  Get value from function string\n  \"translateX(20px)\" -> \"20px\"\n*/\nexport const getValueFromFunctionString = (value) => value.substring(value.indexOf('(') + 1, value.lastIndexOf(')'));\n\n/**\n * Creates a function that will split color\n * values from string into an object of properties\n * `mapArrayToObject(['red', 'green', 'blue'])('rgba(0,0,0)')`\n */\nexport function splitColorValues(terms) {\n  const numTerms = terms.length;\n\n  return function (v) {\n    const values = {};\n    const valuesArray = splitCommaDelimited(getValueFromFunctionString(v));\n\n    for (let i = 0; i < numTerms; i++) {\n      values[terms[i]] = (valuesArray[i] !== undefined) ? parseFloat(valuesArray[i]) : 1;\n    }\n\n    return values;\n  };\n}\n\n/*\n  Is utils var an array ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Array'\n*/\nexport const isArray = (arr) => varType(arr) === 'Array';\n\n/*\n  Is utils var a function ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Function'\n*/\nexport const isFunc = (obj) => varType(obj) === 'Function';\n\n/*\n  Is utils var a number?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'number'\n*/\nexport const isNum = (num) => typeof num === 'number';\n\n/*\n  Is utils var an object?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'object'\n*/\nexport const isObj = (obj) => typeof obj === 'object';\n\n/*\n  Is utils var a string ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof str === 'string'\n*/\nexport const isString = (str) => typeof str === 'string';\n\nexport const isHex = isFirstChars('#');\nexport const isRgb = isFirstChars('rgb');\nexport const isHsl = isFirstChars('hsl');\nexport const isColor = (v) => (isHex(v) || isRgb(v) || isHsl(v));\n"]},"metadata":{},"sourceType":"script"}