[{"/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/index.js":"1","/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/App.js":"2","/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/serviceWorker.js":"3","/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/Login.js":"4","/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/Advanced.js":"5"},{"size":547,"mtime":1713402213000,"results":"6","hashOfConfig":"7"},{"size":513,"mtime":1713634631000,"results":"8","hashOfConfig":"7"},{"size":4951,"mtime":1699344360000,"results":"9","hashOfConfig":"7"},{"size":552,"mtime":1713572978000,"results":"10","hashOfConfig":"7"},{"size":6748,"mtime":1713638507975,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yd9sxh",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/index.js",[],[],"/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/App.js",["29","30","31"],[],"import React, { useState } from 'react'\nimport { Button } from \"semantic-ui-react\";\nimport './App.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport Switch from 'react-ios-switch'\nimport { Routes, Route } from 'react-router-dom';\nimport Login from './Login';\nimport Advanced from './Advanced'\n\nfunction App() {\n  return (\n    <div>\n      <Routes>\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/content\" element={<Advanced />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;","/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/serviceWorker.js",[],[],"/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/Login.js",[],[],"/Users/megansu/Desktop/eecs441/moodmixx/moodmixx/src/Advanced.js",["32","33"],[],"import React, { useState, useMemo, useEffect, useRef } from \"react\";\nimport TinderCard from \"react-tinder-card\";\nfunction Advanced() {\n  const [songs, setSongs] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastDirection, setLastDirection] = useState();\n  const [song, setSong] = useState(null);\n  const audioRef = useRef(new Audio());\n  const currentIndexRef = useRef(currentIndex);\n  const childRefs = useMemo(\n    () =>\n      Array(songs.length)\n        .fill(0)\n        .map(() => React.createRef()),\n    [songs.length]\n  );\n\n  useEffect(() => {\n    fetchDaylist();\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n    };\n  }, []);\n\n  const fetchDaylist = async () => {\n    setIsLoading(true);\n    try {\n      // Adjust the URL to where your backend endpoint for getDaylist is hosted\n      const response = await fetch(\"http://localhost:8080/playlistTracks\", {\n        credentials: \"include\",\n        mode: \"cors\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch daylist\");\n      const data = await response.json();\n      const thankYouCard = {\n        song_name: \"Thank You for Playing!\",\n        album_cover: \"https://eecs441soloway.github.io/images/soloway.jpg\", // You could specify an image URL for the thank you card background\n        album_name: \"We hope you enjoyed the experience.\",\n        artist_names: \"- MoodMixx Team\",\n        isThankYouCard: true, // A flag to identify the thank you card\n      };\n      setSongs([thankYouCard, ...data.song_info]);\n      setCurrentIndex(data.song_info.length);\n    } catch (error) {\n      console.error(\"Error fetching daylist:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateCurrentIndex = (val) => {\n    setCurrentIndex(val);\n    currentIndexRef.current = val;\n  };\n\n  const canGoBack = currentIndex < songs.length - 1;\n\n  const canSwipe = currentIndex >= 0;\n\n  // set last direction and decrease current index\n  function stop() {\n    audioRef.current.pause();\n  }\n\n  const swiped = (direction, nameToDelete, index, song_preview, track_id) => {\n    setLastDirection(direction);\n    updateCurrentIndex(index - 1);\n    stop();\n    if (direction === \"right\") {\n      // Make a POST request to the server to add track to Spotify library\n      fetch(\"http://localhost:8080/addTrack\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ trackId: track_id }),\n        credentials: \"include\", // Include credentials for CORS and sessions\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data); // You can process server response here\n        })\n        .catch((error) => {\n          console.error(\"Error:\", error);\n        });\n    }\n  };\n\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n    // handle the case in which go back is pressed before card goes outOfFrame\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n    // TODO: when quickly swipe and restore multiple times the same card,\n    // it happens multiple outOfFrame events are queued and the card disappear\n    // during latest swipes. Only the last outOfFrame event should be considered valid\n  };\n\n  const swipe = async (dir) => {\n    if (canSwipe && currentIndex < songs.length) {\n      await childRefs[currentIndex].current.swipe(dir); // Swipe the card!\n    }\n  };\n\n  // increase current index and show card\n  const goBack = async () => {\n    if (!canGoBack) return;\n    const newIndex = currentIndex + 1;\n    updateCurrentIndex(newIndex);\n    stop();\n    await childRefs[newIndex].current.restoreCard();\n  };\n\n  function StartButton({ song_preview }) {\n    function start() {\n      if (song) {\n        song.pause(); // Ensures any currently playing song is stopped\n        song.currentTime = 0; // Resets the playback position\n      }\n      const audio = new Audio(song_preview);\n      audio.play();\n      setSong(audio);\n    }\n\n    return (\n      <button className=\"play-button\" onClick={start}>\n        Play!\n      </button>\n    );\n  }\n\n  function StopButton() {\n    function stop() {\n      console.log(\"song from react:\", song);\n      song.pause();\n      console.log(\"did this stop\");\n    }\n\n    return (\n      <button className=\"pause-button\" onClick={stop}>\n        Pause!\n      </button>\n    );\n  }\n\n  return (\n    <div>\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500&family=MuseoModerno:ital,wght@0,100..900;1,100..900&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Alatsi&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <h1 className=\"moodmixx-title\">moodmixx</h1>\n      <div className=\"cardContainer\">\n        {songs.map((song, index) => (\n          <div>\n            <TinderCard\n              ref={childRefs[index]}\n              className=\"swipe\"\n              key={song.song_name}\n              onSwipe={(dir) =>\n                swiped(\n                  dir,\n                  song.song_name,\n                  index,\n                  song.preview_url,\n                  song.track_id\n                )\n              }\n              onCardLeftScreen={() => outOfFrame(song.song_name, index)}\n            >\n              <div\n                style={{ backgroundImage: \"url(\" + song.album_cover + \")\" }}\n                className=\"card\"\n              >\n                <h2>{song.song_name}</h2>\n                <p>\n                  {song.album_name} <br></br>\n                  {song.artist_names}\n                </p>\n              </div>\n              <StartButton song_preview={song.preview_url} />\n              {<StopButton />}\n            </TinderCard>\n          </div>\n        ))}\n      </div>\n      <div className=\"buttons\">\n        <button\n          style={{ backgroundColor: !canSwipe && \"#c3c4d3\" }}\n          onClick={() => swipe(\"left\")}\n        >\n          Swipe left!\n        </button>\n        <button\n          style={{ backgroundColor: !canGoBack && \"#c3c4d3\" }}\n          onClick={() => goBack()}\n        >\n          Undo swipe!\n        </button>\n        <button\n          style={{ backgroundColor: !canSwipe && \"#c3c4d3\" }}\n          onClick={() => swipe(\"right\")}\n        >\n          Swipe right!\n        </button>\n      </div>\n      {lastDirection ? (\n        <h2 key={lastDirection} className=\"infoText\">\n          You swiped {lastDirection}\n        </h2>\n      ) : (\n        <h2 className=\"infoText\">Swipe a card to get started!</h2>\n      )}\n    </div>\n  );\n}\n\nexport default Advanced;\n",{"ruleId":"34","severity":1,"message":"35","line":1,"column":17,"nodeType":"36","messageId":"37","endLine":1,"endColumn":25},{"ruleId":"34","severity":1,"message":"38","line":2,"column":10,"nodeType":"36","messageId":"37","endLine":2,"endColumn":16},{"ruleId":"34","severity":1,"message":"39","line":5,"column":8,"nodeType":"36","messageId":"37","endLine":5,"endColumn":14},{"ruleId":"34","severity":1,"message":"40","line":6,"column":10,"nodeType":"36","messageId":"37","endLine":6,"endColumn":19},{"ruleId":"41","severity":1,"message":"42","line":25,"column":16,"nodeType":"36","endLine":25,"endColumn":23},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Switch' is defined but never used.","'isLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","The ref value 'audioRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'audioRef.current' to a variable inside the effect, and use that variable in the cleanup function."]